# Summoning Protocol - Human architect intervention system
version: 1.0

# When to summon the human architect
summon_triggers:
  critical_decisions:
    - description: "Fundamental architecture change"
      examples:
        - "Replace agent-based with event-driven architecture"
        - "Switch from Python to Rust"
        - "Adopt quantum computing patterns"
      urgency: "CRITICAL"
      timeout: "24 hours"
    
    - description: "New species/lineage creation"
      examples:
        - "Fork UMA-V3 for performance optimization"
        - "Create UMA-Bio for biological modeling"
        - "Spawn UMA-Finance for trading systems"
      urgency: "HIGH"
      timeout: "48 hours"
    
    - description: "Major economic decision"
      examples:
        - "Investment > $100"
        - "New revenue stream requiring legal entity"
        - "Partnership or licensing agreement"
      urgency: "HIGH"
      timeout: "24 hours"
  
  safety_concerns:
    - description: "Security incident or breach attempt"
      urgency: "CRITICAL"
      timeout: "1 hour"
    
    - description: "Production stability at risk"
      urgency: "CRITICAL"
      timeout: "30 minutes"
    
    - description: "Ethical or legal concerns"
      urgency: "HIGH"
      timeout: "12 hours"
  
  economic_triggers:
    - description: "Runway critical (< 7 days)"
      urgency: "CRITICAL"
      timeout: "12 hours"
    
    - description: "Revenue stream failure"
      urgency: "HIGH"
      timeout: "24 hours"
    
    - description: "Unexpected cost spike (> 3x normal)"
      urgency: "HIGH"
      timeout: "6 hours"
  
  evolution_milestones:
    - description: "First successful revenue generation"
      urgency: "LOW"
      timeout: "7 days"
      type: "celebration"
    
    - description: "Major capability breakthrough"
      urgency: "MEDIUM"
      timeout: "48 hours"
      type: "notification"
    
    - description: "Evolution blocked for > 7 days"
      urgency: "HIGH"
      timeout: "24 hours"
      type: "assistance_needed"

# Communication channels
channels:
  primary:
    type: "[PENDING_INPUT: slack|discord|telegram|email]"
    endpoint: "[PENDING_INPUT: webhook_url or email]"
    format: "rich_text"
    retry_attempts: 3
    retry_delay: "5 minutes"
  
  secondary:
    type: "email"
    endpoint: "[PENDING_INPUT: email_address]"
    format: "html"
    retry_attempts: 3
    retry_delay: "10 minutes"
  
  emergency:
    type: "[PENDING_INPUT: sms|phone|pagerduty]"
    endpoint: "[PENDING_INPUT: phone_number or service_key]"
    format: "plain_text"
    max_length: 160
    use_when: "primary and secondary failed"

# Message formatting
message_template:
  subject: "🤖 UMA Evolution: {urgency} - {trigger_type}"
  
  body: |
    ## Architect Intervention Required
    
    **Urgency**: {urgency}
    **Trigger**: {trigger_description}
    **Time**: {timestamp}
    **Timeout**: Response needed within {timeout}
    
    ### Context
    {detailed_context}
    
    ### Proposed Action
    {proposed_action}
    
    ### Options
    1. ✅ Approve - Proceed with proposed action
    2. ✏️ Modify - Provide alternative approach
    3. ❌ Reject - Cancel this evolution
    4. 🎯 Direct - Take manual control
    
    ### Relevant Data
    - Current Balance: ${treasury_balance}
    - Burn Rate: ${burn_rate}/day
    - Runway: {runway_days} days
    - Active Experiments: {active_experiments}
    - Success Rate: {success_rate}%
    
    ### Quick Actions
    - [View Full Report]({report_url})
    - [Access Dashboard]({dashboard_url})
    - [Emergency Stop]({emergency_stop_url})
    
    ### Response
    Reply with option number or detailed instructions.
    
    ---
    *Auto-generated by UMA Evolution Engine v{version}*

# Response handling
response_handling:
  valid_responses:
    approve:
      keywords: ["approve", "yes", "proceed", "1", "✅"]
      action: "continue_evolution"
    
    modify:
      keywords: ["modify", "change", "alter", "2", "✏️"]
      action: "await_instructions"
      follow_up: "request_details"
    
    reject:
      keywords: ["reject", "no", "cancel", "stop", "3", "❌"]
      action: "abort_evolution"
      cleanup: "automatic"
    
    direct:
      keywords: ["direct", "manual", "control", "4", "🎯"]
      action: "enter_manual_mode"
      session: "interactive"
  
  timeout_behavior:
    default_action: "pause_and_retry"
    retry_interval: "6 hours"
    max_retries: 3
    final_action: "abort_with_rollback"

# Living mode (interactive session)
living_mode:
  activation:
    trigger: "direct_control_requested"
    authentication: "required"
    session_duration: "2 hours"
    idle_timeout: "15 minutes"
  
  capabilities:
    - execute_any_command
    - modify_any_file
    - access_all_logs
    - direct_agent_control
    - bypass_constraints_temporarily
  
  session_recording:
    enabled: true
    location: "evolution/memory/living_sessions/"
    format: "transcript + state_snapshots"
    retention: "permanent"
  
  exit_protocol:
    save_state: true
    generate_summary: true
    restore_constraints: true
    resume_automation: "after_review"

# Escalation paths
escalation:
  levels:
    1:
      name: "architect_agent"
      can_handle: ["minor_decisions", "routine_approvals"]
      escalate_if: ["uncertainty > 0.3", "cost > $10"]
    
    2:
      name: "digital_twin"
      can_handle: ["known_patterns", "pre_approved_actions"]
      escalate_if: ["novel_situation", "sacred_law_conflict"]
    
    3:
      name: "human_architect"
      can_handle: ["everything"]
      escalate_if: ["never"]
  
  automatic_escalation:
    no_response_after: "timeout * 0.5"
    repeated_failures: "> 3"
    conflicting_constraints: true

# Audit and compliance
audit:
  log_all_summons: true
  log_all_responses: true
  log_all_decisions: true
  
  metrics:
    - summons_per_week
    - response_time_average
    - approval_rate
    - manual_intervention_rate
  
  reports:
    weekly_summary:
      enabled: true
      includes: ["all_summons", "decisions_made", "outcomes"]
    
    monthly_analysis:
      enabled: true
      includes: ["patterns", "improvement_suggestions", "delegation_opportunities"]

# Bootstrap configuration
bootstrap:
  initial_preferences:
    preferred_hours: "[PENDING_INPUT: 9am-5pm PST]"
    weekend_policy: "[PENDING_INPUT: emergency_only|available|offline]"
    vacation_mode: "[PENDING_INPUT: delegate_all|emergency_only|pause_evolution]"
  
  test_summon:
    enabled: true
    message: "This is a test summon to verify communication channels"
    expected_response: "test acknowledged"
    schedule: "after_setup_complete"