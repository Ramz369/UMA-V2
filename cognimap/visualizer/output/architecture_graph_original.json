{
  "nodes": [
    {
      "id": "c5d3d629-a32d-49c3-b530-eab6277fd6d1",
      "filepath": "tools/meta_analyst.py",
      "name": "meta_analyst",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "authentication",
        "database",
        "api",
        "testing",
        "ui",
        "model",
        "utility"
      ],
      "imports": [
        "argparse\nimport csv\nimport yaml\nfrom pathlib import Path\nfrom datetime import datetime, timedelta, timezone\nfrom typing import Dict, Any, List\nfrom collections import defaultdict\n\n\nclass MetaAnalyst"
      ],
      "exports": [
        "MetaAnalyst",
        "main"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "c5d3d629-a32d-49c3-b530-eab6277fd6d1",
        "birth": "2025-08-07T07:23:38.056996Z",
        "parent": null,
        "intent": "Meta-Analyst - Analyzes system metrics and generates reports.",
        "semantic_tags": [
          "authentication",
          "database",
          "api",
          "testing",
          "ui",
          "model",
          "utility"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.058419Z",
        "hash": "5e489a00",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "a74b8f33-465b-47ae-ac98-87abba239dc4",
      "filepath": "tools/credit_sentinel_v2.py",
      "name": "credit_sentinel_v2",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "authentication",
        "api",
        "testing",
        "model",
        "configuration"
      ],
      "imports": [
        "json\nimport time\nimport threading\nimport os\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional, List, Tuple\nfrom dataclasses import dataclass, field, asdict\nfrom datetime import datetime, timedelta\nfrom enum import Enum\nimport csv\nimport yaml\n\n\nclass ThrottleAction"
      ],
      "exports": [
        "track_tool_call",
        "CreditSentinel",
        "get_metrics_json",
        "get_sentinel",
        "ThrottleAction",
        "AgentMetrics",
        "GlobalMetrics"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "a74b8f33-465b-47ae-ac98-87abba239dc4",
        "birth": "2025-08-07T07:23:38.058544Z",
        "parent": null,
        "intent": "Credit Sentinel v2 - Real-time token and wall-time throttling with metrics.",
        "semantic_tags": [
          "authentication",
          "api",
          "testing",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.059284Z",
        "hash": "ee97b767",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "cf7d30f7-cf43-4b21-b5bb-77feb7a87e0a",
      "filepath": "tools/session_summarizer.py",
      "name": "session_summarizer",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "api",
        "testing",
        "model",
        "security"
      ],
      "imports": [
        "json\nimport hashlib\nimport subprocess\nimport yaml\nfrom pathlib import Path\nfrom typing import Dict, Any, List, Optional\nfrom datetime import datetime, timezone\nimport time\n\n"
      ],
      "exports": [
        "generate_session_summary",
        "SessionSummarizer",
        "save_session_summary"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "cf7d30f7-cf43-4b21-b5bb-77feb7a87e0a",
        "birth": "2025-08-07T07:23:38.059415Z",
        "parent": null,
        "intent": "Session Summarizer - Generates canonical YAML summaries for agent coordination.",
        "semantic_tags": [
          "api",
          "testing",
          "model",
          "security"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.060121Z",
        "hash": "ae6c0de9",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "efe65f07-ff95-42f2-b38f-0a594550d66f",
      "filepath": "tools/lock_watcher.py",
      "name": "lock_watcher",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "testing",
        "configuration"
      ],
      "imports": [
        "time, yaml, pathlib\nCFG "
      ],
      "exports": [
        "run_once"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "efe65f07-ff95-42f2-b38f-0a594550d66f",
        "birth": "2025-08-07T07:23:38.060172Z",
        "parent": null,
        "intent": "Monitor git-based lock graph and abort dead-locks (stub).",
        "semantic_tags": [
          "testing",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.060204Z",
        "hash": "76d3da47",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "693c88f0-2b6f-4574-a54a-a7f3a30c24b3",
      "filepath": "tools/github_client.py",
      "name": "github_client",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "authentication",
        "api",
        "testing",
        "ui",
        "configuration"
      ],
      "imports": [
        "subprocess\nimport json\nimport os\nimport time\nfrom typing import Dict, Any, Optional, List, Tuple\nfrom dataclasses import dataclass\nfrom enum import Enum\n\n\nclass MergeMethod"
      ],
      "exports": [
        "PullRequest",
        "MergeMethod",
        "GitHubClient",
        "CIStatus"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "693c88f0-2b6f-4574-a54a-a7f3a30c24b3",
        "birth": "2025-08-07T07:23:38.060265Z",
        "parent": null,
        "intent": "GitHub Client - Wrapper for GitHub API operations via gh CLI.",
        "semantic_tags": [
          "authentication",
          "api",
          "testing",
          "ui",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.060699Z",
        "hash": "f2b5ca04",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "e7779f26-2783-49d2-9d36-59aacc48ff6b",
      "filepath": "tools/context_validator.py",
      "name": "context_validator",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "testing",
        "model",
        "security"
      ],
      "imports": [
        "hashlib\nimport json\nimport subprocess\nfrom pathlib import Path\nfrom typing import Dict, Any, Tuple, Optional\nfrom datetime import datetime, timezone\n\ntry"
      ],
      "exports": [
        "check_context_status",
        "ContextValidator",
        "validate_and_get_context"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "e7779f26-2783-49d2-9d36-59aacc48ff6b",
        "birth": "2025-08-07T07:23:38.060755Z",
        "parent": null,
        "intent": "Context Validator - Pre-flight validation for agent startup.",
        "semantic_tags": [
          "testing",
          "model",
          "security"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.061295Z",
        "hash": "feec182a",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "ae2ca678-32e8-4dc7-8aad-99dca43c8064",
      "filepath": "tools/har_analyzer.py",
      "name": "har_analyzer",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "api",
        "ui"
      ],
      "imports": [
        "pathlib",
        "json\nimport sys\nimport statistics as stats\nfrom typing import Dict, List, Any, Optional, Tuple\nfrom dataclasses import dataclass\nfrom datetime import datetime\nimport urllib"
      ],
      "exports": [
        "HARAnalyzer",
        "analyze",
        "TimingMetrics",
        "RequestMetrics"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "ae2ca678-32e8-4dc7-8aad-99dca43c8064",
        "birth": "2025-08-07T07:23:38.061379Z",
        "parent": null,
        "intent": "Extract comprehensive timing metrics from HAR files - Production Implementation.",
        "semantic_tags": [
          "api",
          "ui"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.061974Z",
        "hash": "ce9ac395",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "eab608ac-719f-45c9-afc5-2e5f257cef47",
      "filepath": "tools/semantic_diff.py",
      "name": "semantic_diff",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "authentication",
        "database",
        "testing",
        "security"
      ],
      "imports": [
        "dataclasses",
        "__future__",
        "json\nimport sys\nimport yaml\nfrom typing import Dict, List, Any, Tuple, Optional\n\n"
      ],
      "exports": [
        "ChangeType",
        "SemanticDiffer",
        "diff",
        "DiffNode"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "eab608ac-719f-45c9-afc5-2e5f257cef47",
        "birth": "2025-08-07T07:23:38.062022Z",
        "parent": null,
        "intent": "AST-aware diff for JSON / YAML / SQL - Production Implementation.",
        "semantic_tags": [
          "authentication",
          "database",
          "testing",
          "security"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.062321Z",
        "hash": "affecaba",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "5c2bf869-781e-42ab-a89d-35cd308183a3",
      "filepath": "tests/test_planner_agent.py",
      "name": "test_planner_agent",
      "type": "agent",
      "language": "python",
      "semantic_tags": [
        "authentication",
        "api",
        "testing",
        "ui",
        "service",
        "configuration",
        "security"
      ],
      "imports": [
        "asyncio\nimport json\nimport pytest\nfrom pathlib import Path\nimport sys\n\n"
      ],
      "exports": [
        "test_task_complexity_enum",
        "test_task_plan_dataclass",
        "TestPlannerAgent"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "5c2bf869-781e-42ab-a89d-35cd308183a3",
        "birth": "2025-08-07T07:23:38.062382Z",
        "parent": null,
        "intent": "Tests for the Planner Agent.",
        "semantic_tags": [
          "authentication",
          "api",
          "testing",
          "ui",
          "service",
          "configuration",
          "security"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.062616Z",
        "hash": "582d754f",
        "language": "python",
        "type": "agent"
      }
    },
    {
      "id": "ef146e83-572f-4cd0-865b-b3e8b5bdf43c",
      "filepath": "tests/test_garbage_flag.py",
      "name": "test_garbage_flag",
      "type": "test",
      "language": "python",
      "semantic_tags": [
        "testing",
        "service",
        "model",
        "configuration"
      ],
      "imports": [
        "json\nimport pytest\nfrom datetime import datetime\nfrom uuid import uuid4\nfrom unittest",
        "semloop_models"
      ],
      "exports": [
        "TestEmbedderServiceGarbageHandling",
        "TestEventEnvelopeGarbageFlag",
        "TestSchemaValidation"
      ],
      "calls": [],
      "dependencies": [
        "semloop_models/__init__.py"
      ],
      "fingerprint": {
        "id": "ef146e83-572f-4cd0-865b-b3e8b5bdf43c",
        "birth": "2025-08-07T07:23:38.062664Z",
        "parent": null,
        "intent": "Tests for garbage flag functionality.",
        "semantic_tags": [
          "testing",
          "service",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.063008Z",
        "hash": "da184075",
        "language": "python",
        "type": "test"
      }
    },
    {
      "id": "1fac3343-5bbe-4ca9-be1d-54cfb3edf94f",
      "filepath": "tests/test_pilot_001_e2e.py",
      "name": "test_pilot_001_e2e",
      "type": "test",
      "language": "python",
      "semantic_tags": [
        "api",
        "testing",
        "ui",
        "service",
        "model",
        "configuration"
      ],
      "imports": [
        "asyncio\nimport json\nimport time\nfrom datetime import datetime, timedelta\nfrom pathlib import Path\nfrom typing import Dict, List, Any\n"
      ],
      "exports": [
        "MockCreditSentinel",
        "PILOT001Pipeline",
        "MockSemLoopClient"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "1fac3343-5bbe-4ca9-be1d-54cfb3edf94f",
        "birth": "2025-08-07T07:23:38.063135Z",
        "parent": null,
        "intent": "PILOT-001: End-to-End Test for UMA-V2 Stack",
        "semantic_tags": [
          "api",
          "testing",
          "ui",
          "service",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.063699Z",
        "hash": "e4a7e200",
        "language": "python",
        "type": "test"
      }
    },
    {
      "id": "af1569c9-2491-490e-b1d8-298b55e29457",
      "filepath": "tests/test_tool_hunter_agent.py",
      "name": "test_tool_hunter_agent",
      "type": "agent",
      "language": "python",
      "semantic_tags": [
        "database",
        "testing",
        "model",
        "utility",
        "configuration",
        "security"
      ],
      "imports": [
        "asyncio\nimport json\nfrom datetime import datetime\nfrom pathlib import Path\nimport sys\nimport tempfile\nimport shutil\n\n"
      ],
      "exports": [
        "TestToolHunterAgent"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "af1569c9-2491-490e-b1d8-298b55e29457",
        "birth": "2025-08-07T07:23:38.063770Z",
        "parent": null,
        "intent": "Tests for Tool Hunter Agent",
        "semantic_tags": [
          "database",
          "testing",
          "model",
          "utility",
          "configuration",
          "security"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.064333Z",
        "hash": "271780da",
        "language": "python",
        "type": "agent"
      }
    },
    {
      "id": "31e9009e-3331-4717-b856-be0c11b9c8dd",
      "filepath": "tests/test_har_analyzer.py",
      "name": "test_har_analyzer",
      "type": "test",
      "language": "python",
      "semantic_tags": [
        "database",
        "api",
        "testing",
        "ui"
      ],
      "imports": [
        "pytest\nimport json\nimport tempfile\nfrom pathlib import Path\nimport sys\n\n",
        "tools.har_analyzer"
      ],
      "exports": [
        "TestHARAnalyzer"
      ],
      "calls": [],
      "dependencies": [
        "tools/har_analyzer.py"
      ],
      "fingerprint": {
        "id": "31e9009e-3331-4717-b856-be0c11b9c8dd",
        "birth": "2025-08-07T07:23:38.064449Z",
        "parent": null,
        "intent": "Unit tests for HAR analyzer tool.",
        "semantic_tags": [
          "database",
          "api",
          "testing",
          "ui"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.064951Z",
        "hash": "5051569b",
        "language": "python",
        "type": "test"
      }
    },
    {
      "id": "f004cb7b-696f-4574-9fd8-48d3b53d1d1d",
      "filepath": "tests/test_credit_sentinel.py",
      "name": "test_credit_sentinel",
      "type": "test",
      "language": "python",
      "semantic_tags": [
        "authentication",
        "api",
        "testing",
        "configuration"
      ],
      "imports": [
        "pytest\nimport json\nimport time\nimport tempfile\nimport csv\nfrom pathlib import Path\nfrom datetime import datetime, timedelta\nimport sys\nimport threading\n\n"
      ],
      "exports": [
        "TestCreditSentinel"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "f004cb7b-696f-4574-9fd8-48d3b53d1d1d",
        "birth": "2025-08-07T07:23:38.065062Z",
        "parent": null,
        "intent": "Unit tests for credit sentinel v2.",
        "semantic_tags": [
          "authentication",
          "api",
          "testing",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.065800Z",
        "hash": "9a892dc4",
        "language": "python",
        "type": "test"
      }
    },
    {
      "id": "85b6e525-8907-4368-a323-5a268effe464",
      "filepath": "tests/test_aether_sprint_1.py",
      "name": "test_aether_sprint_1",
      "type": "test",
      "language": "python",
      "semantic_tags": [
        "testing",
        "ui",
        "service",
        "configuration"
      ],
      "imports": [
        "asyncio\nimport json\nimport sys\nfrom pathlib import Path\nfrom typing import Dict, Any, List\nfrom datetime import datetime\nfrom uuid import uuid4\n\n"
      ],
      "exports": [
        "TestPolarityEmbedder",
        "TestPolarityCalculator",
        "TestMigration",
        "TestPolarityThreshold",
        "test_sprint_1_requirements"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "85b6e525-8907-4368-a323-5a268effe464",
        "birth": "2025-08-07T07:23:38.065959Z",
        "parent": null,
        "intent": "Test Suite for Aether Protocol Sprint 1: Polarity Spectrum",
        "semantic_tags": [
          "testing",
          "ui",
          "service",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.066944Z",
        "hash": "7073da27",
        "language": "python",
        "type": "test"
      }
    },
    {
      "id": "56991e25-4b28-4a19-85f2-40cdfe8177f2",
      "filepath": "tests/test_aether_sprint_0.py",
      "name": "test_aether_sprint_0",
      "type": "test",
      "language": "python",
      "semantic_tags": [
        "database",
        "api",
        "testing",
        "ui",
        "configuration"
      ],
      "imports": [
        "asyncio\nimport pytest\nimport sys\nimport os\nfrom datetime import datetime\nfrom uuid import UUID, uuid4\nfrom pathlib import Path\n\n"
      ],
      "exports": [
        "TestIntentSubstrate",
        "TestIntegration",
        "test_sprint_0_requirements",
        "TestEnhancedEvents"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "56991e25-4b28-4a19-85f2-40cdfe8177f2",
        "birth": "2025-08-07T07:23:38.067085Z",
        "parent": null,
        "intent": "Test Suite for Aether Protocol Sprint 0: Intent Substrate",
        "semantic_tags": [
          "database",
          "api",
          "testing",
          "ui",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.067748Z",
        "hash": "1484c003",
        "language": "python",
        "type": "test"
      }
    },
    {
      "id": "1d0cfbff-0f4d-4327-953b-9eb88d21fced",
      "filepath": "tests/test_semloop_bootstrap.py",
      "name": "test_semloop_bootstrap",
      "type": "test",
      "language": "python",
      "semantic_tags": [
        "database",
        "api",
        "testing",
        "service",
        "configuration"
      ],
      "imports": [
        "pytest\nimport subprocess\nimport time\nfrom pathlib import Path\nimport sys\n\n"
      ],
      "exports": [
        "TestSemLoopBootstrap"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "1d0cfbff-0f4d-4327-953b-9eb88d21fced",
        "birth": "2025-08-07T07:23:38.067818Z",
        "parent": null,
        "intent": "Integration tests for SemLoop stack bootstrap.",
        "semantic_tags": [
          "database",
          "api",
          "testing",
          "service",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.068070Z",
        "hash": "5a70ef3f",
        "language": "python",
        "type": "test"
      }
    },
    {
      "id": "a459b0cc-64d2-447b-a496-f1c34c8e6521",
      "filepath": "tests/test_session_summarizer.py",
      "name": "test_session_summarizer",
      "type": "test",
      "language": "python",
      "semantic_tags": [
        "testing",
        "model",
        "security"
      ],
      "imports": [
        "tools.session_summarizer",
        "datetime",
        "pytest\nimport json\nimport yaml\nimport tempfile\nfrom pathlib import Path\nfrom unittest"
      ],
      "exports": [
        "TestSessionSummarizer",
        "TestContextValidator"
      ],
      "calls": [],
      "dependencies": [
        "tools/session_summarizer.py"
      ],
      "fingerprint": {
        "id": "a459b0cc-64d2-447b-a496-f1c34c8e6521",
        "birth": "2025-08-07T07:23:38.068133Z",
        "parent": null,
        "intent": "Unit tests for session summarizer and context validator.",
        "semantic_tags": [
          "testing",
          "model",
          "security"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.068708Z",
        "hash": "8d44b32a",
        "language": "python",
        "type": "test"
      }
    },
    {
      "id": "e93b9b81-8df0-4923-aeea-df0130328f26",
      "filepath": "tests/test_aether_sprint_2.py",
      "name": "test_aether_sprint_2",
      "type": "test",
      "language": "python",
      "semantic_tags": [
        "database",
        "api",
        "testing",
        "model",
        "configuration"
      ],
      "imports": [
        "asyncio\nimport sys\nfrom pathlib import Path\nfrom typing import Dict, Any, List\nfrom datetime import datetime, timedelta\nfrom uuid import uuid4\n\n"
      ],
      "exports": [
        "TestInterestCalculation",
        "TestKarmaAgentRuntime",
        "TestKarmicOrchestrator",
        "test_sprint_2_requirements"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "e93b9b81-8df0-4923-aeea-df0130328f26",
        "birth": "2025-08-07T07:23:38.068778Z",
        "parent": null,
        "intent": "Test Suite for Aether Protocol Sprint 2: Karmic Ledger",
        "semantic_tags": [
          "database",
          "api",
          "testing",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.069255Z",
        "hash": "95cc4115",
        "language": "python",
        "type": "test"
      }
    },
    {
      "id": "7106be42-d2c5-44c2-a45e-a52327aaf4b8",
      "filepath": "tests/__init__.py",
      "name": "__init__",
      "type": "test",
      "language": "python",
      "semantic_tags": [
        "testing"
      ],
      "imports": [],
      "exports": [],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "7106be42-d2c5-44c2-a45e-a52327aaf4b8",
        "birth": "2025-08-07T07:23:38.069352Z",
        "parent": null,
        "intent": "Test suite for UMA-V2 tools.",
        "semantic_tags": [
          "testing"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.069364Z",
        "hash": "6ce6ff32",
        "language": "python",
        "type": "test"
      }
    },
    {
      "id": "264273be-b9f4-4bb1-ba0c-f68358536ddc",
      "filepath": "tests/test_meta_analyst.py",
      "name": "test_meta_analyst",
      "type": "test",
      "language": "python",
      "semantic_tags": [
        "authentication",
        "database",
        "testing",
        "utility"
      ],
      "imports": [
        "tools.meta_analyst",
        "tempfile\nimport yaml\nimport csv\nimport pytest\nfrom pathlib import Path\nimport sys\n\n"
      ],
      "exports": [
        "TestMetaAnalyst"
      ],
      "calls": [],
      "dependencies": [
        "tools/meta_analyst.py"
      ],
      "fingerprint": {
        "id": "264273be-b9f4-4bb1-ba0c-f68358536ddc",
        "birth": "2025-08-07T07:23:38.069426Z",
        "parent": null,
        "intent": "Unit tests for Meta-Analyst.",
        "semantic_tags": [
          "authentication",
          "database",
          "testing",
          "utility"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.069821Z",
        "hash": "7995827f",
        "language": "python",
        "type": "test"
      }
    },
    {
      "id": "e71d2bc7-27c6-4605-97ff-109290b17ec1",
      "filepath": "tests/test_codegen_agent.py",
      "name": "test_codegen_agent",
      "type": "agent",
      "language": "python",
      "semantic_tags": [
        "api",
        "testing",
        "service",
        "model",
        "configuration"
      ],
      "imports": [
        "asyncio\nimport json\nfrom pathlib import Path\nimport sys\nimport pytest\n\n"
      ],
      "exports": [],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "e71d2bc7-27c6-4605-97ff-109290b17ec1",
        "birth": "2025-08-07T07:23:38.069877Z",
        "parent": null,
        "intent": "Tests for the Codegen Agent.",
        "semantic_tags": [
          "api",
          "testing",
          "service",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.070173Z",
        "hash": "4a313d61",
        "language": "python",
        "type": "agent"
      }
    },
    {
      "id": "3973755c-8b69-4cab-b2ae-662d227dbe9e",
      "filepath": "tests/test_github_client.py",
      "name": "test_github_client",
      "type": "test",
      "language": "python",
      "semantic_tags": [
        "authentication",
        "database",
        "api",
        "testing"
      ],
      "imports": [
        "subprocess\nfrom pathlib import Path\nimport sys\n\n",
        "pytest\nimport json\nfrom unittest"
      ],
      "exports": [
        "TestGitHubClient"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "3973755c-8b69-4cab-b2ae-662d227dbe9e",
        "birth": "2025-08-07T07:23:38.070240Z",
        "parent": null,
        "intent": "Unit tests for GitHub client.",
        "semantic_tags": [
          "authentication",
          "database",
          "api",
          "testing"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.070812Z",
        "hash": "7b1b061a",
        "language": "python",
        "type": "test"
      }
    },
    {
      "id": "c15937fb-abe2-40ab-bbbf-0ca55bd60e80",
      "filepath": "tests/test_real_embeddings.py",
      "name": "test_real_embeddings",
      "type": "test",
      "language": "python",
      "semantic_tags": [
        "api",
        "testing",
        "service",
        "model",
        "configuration",
        "security"
      ],
      "imports": [
        "asyncio\nimport json\nimport os\nfrom pathlib import Path\nimport sys\n\n",
        "services.embedder"
      ],
      "exports": [],
      "calls": [],
      "dependencies": [
        "services/embedder.py"
      ],
      "fingerprint": {
        "id": "c15937fb-abe2-40ab-bbbf-0ca55bd60e80",
        "birth": "2025-08-07T07:23:38.070865Z",
        "parent": null,
        "intent": "Test real embeddings implementation.",
        "semantic_tags": [
          "api",
          "testing",
          "service",
          "model",
          "configuration",
          "security"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.071068Z",
        "hash": "dcd250fa",
        "language": "python",
        "type": "test"
      }
    },
    {
      "id": "0547e28b-d929-49e4-89bd-606315fb061a",
      "filepath": "tests/test_semantic_diff.py",
      "name": "test_semantic_diff",
      "type": "test",
      "language": "python",
      "semantic_tags": [
        "database",
        "testing",
        "configuration"
      ],
      "imports": [
        "tools.semantic_diff",
        "pytest\nimport json\nimport yaml\nfrom pathlib import Path\nimport sys\n\n"
      ],
      "exports": [
        "TestSemanticDiff"
      ],
      "calls": [],
      "dependencies": [
        "tools/semantic_diff.py"
      ],
      "fingerprint": {
        "id": "0547e28b-d929-49e4-89bd-606315fb061a",
        "birth": "2025-08-07T07:23:38.071113Z",
        "parent": null,
        "intent": "Unit tests for semantic_diff tool.",
        "semantic_tags": [
          "database",
          "testing",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.071436Z",
        "hash": "41ef5416",
        "language": "python",
        "type": "test"
      }
    },
    {
      "id": "759c934d-3559-44d4-a165-a8800d786df9",
      "filepath": "src/__init__.py",
      "name": "__init__",
      "type": "component",
      "language": "python",
      "semantic_tags": [],
      "imports": [],
      "exports": [],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "759c934d-3559-44d4-a165-a8800d786df9",
        "birth": "2025-08-07T07:23:38.071468Z",
        "parent": null,
        "intent": "Purpose to be determined",
        "semantic_tags": [],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.071603Z",
        "hash": "e3b0c442",
        "language": "python",
        "type": "component"
      }
    },
    {
      "id": "74d811af-c305-4f7c-964c-a94d4875ce22",
      "filepath": "scripts/semloop_health.py",
      "name": "semloop_health",
      "type": "component",
      "language": "python",
      "semantic_tags": [
        "authentication",
        "database",
        "api",
        "service",
        "configuration"
      ],
      "imports": [
        "asyncio\nimport sys\nimport socket\nimport subprocess\nfrom typing import Tuple, List\n\n\ndef check_port"
      ],
      "exports": [
        "get_host",
        "main",
        "check_port"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "74d811af-c305-4f7c-964c-a94d4875ce22",
        "birth": "2025-08-07T07:23:38.071806Z",
        "parent": null,
        "intent": "SemLoop stack health check script.",
        "semantic_tags": [
          "authentication",
          "database",
          "api",
          "service",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.072068Z",
        "hash": "ef0ae530",
        "language": "python",
        "type": "component"
      }
    },
    {
      "id": "9d5a12cf-7e67-41c2-980b-d3fbf1c53297",
      "filepath": "semloop_models/event_envelope.py",
      "name": "event_envelope",
      "type": "model",
      "language": "python",
      "semantic_tags": [
        "testing",
        "model",
        "configuration",
        "security"
      ],
      "imports": [
        "datetime"
      ],
      "exports": [
        "EventEnvelope",
        "EventMeta",
        "EventType"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "9d5a12cf-7e67-41c2-980b-d3fbf1c53297",
        "birth": "2025-08-07T07:23:38.072132Z",
        "parent": null,
        "intent": "Event envelope data model for SemLoop.",
        "semantic_tags": [
          "testing",
          "model",
          "configuration",
          "security"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.072272Z",
        "hash": "8e120ee9",
        "language": "python",
        "type": "model"
      }
    },
    {
      "id": "dace12d7-4a61-4791-8095-d117dc3d851f",
      "filepath": "semloop_models/__init__.py",
      "name": "__init__",
      "type": "model",
      "language": "python",
      "semantic_tags": [
        "model",
        "configuration"
      ],
      "imports": [
        "semloop_models.event_envelope"
      ],
      "exports": [],
      "calls": [],
      "dependencies": [
        "semloop_models/event_envelope.py"
      ],
      "fingerprint": {
        "id": "dace12d7-4a61-4791-8095-d117dc3d851f",
        "birth": "2025-08-07T07:23:38.072307Z",
        "parent": null,
        "intent": "SemLoop data models for event processing.",
        "semantic_tags": [
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.072327Z",
        "hash": "c614800e",
        "language": "python",
        "type": "model"
      }
    },
    {
      "id": "f1b1e0c5-f78f-4ea4-9113-d57994399706",
      "filepath": "services/embedder.py",
      "name": "embedder",
      "type": "service",
      "language": "python",
      "semantic_tags": [
        "database",
        "api",
        "testing",
        "service",
        "model",
        "configuration",
        "security"
      ],
      "imports": [
        "asyncio\nimport json\nimport logging\nimport os\nfrom typing import Any, Dict, Optional, List\nfrom uuid import UUID\n\nfrom semloop_models import EventEnvelope\n\n\nlogger "
      ],
      "exports": [
        "MockKafkaConsumer",
        "MockVectorStore",
        "EmbedderService"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "f1b1e0c5-f78f-4ea4-9113-d57994399706",
        "birth": "2025-08-07T07:23:38.072375Z",
        "parent": null,
        "intent": "Embedder service for processing SemLoop events.",
        "semantic_tags": [
          "database",
          "api",
          "testing",
          "service",
          "model",
          "configuration",
          "security"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.072712Z",
        "hash": "b9561922",
        "language": "python",
        "type": "service"
      }
    },
    {
      "id": "a0ee398b-9374-4155-abf1-07af981a4bac",
      "filepath": "evolution/test_integration.py",
      "name": "test_integration",
      "type": "test",
      "language": "python",
      "semantic_tags": [
        "testing",
        "utility",
        "configuration"
      ],
      "imports": [
        "common.kafka_utils",
        "asyncio\nimport logging\nimport sys\nfrom pathlib import Path\n\n"
      ],
      "exports": [],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "a0ee398b-9374-4155-abf1-07af981a4bac",
        "birth": "2025-08-07T07:23:38.072770Z",
        "parent": null,
        "intent": "Integration test for Evolution Engine with Kafka wiring.",
        "semantic_tags": [
          "testing",
          "utility",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.073046Z",
        "hash": "f36322a8",
        "language": "python",
        "type": "test"
      }
    },
    {
      "id": "fc957b14-4b15-474c-b6fb-2bd28424e7b9",
      "filepath": "cognimap/cli.py",
      "name": "cli",
      "type": "component",
      "language": "python",
      "semantic_tags": [
        "authentication",
        "database",
        "api",
        "service",
        "utility",
        "configuration"
      ],
      "imports": [
        "rich.table",
        "graph.graph_visualizer",
        "click\nimport yaml\nimport json\nfrom pathlib import Path\nfrom rich",
        "core.scanner",
        "graph.graph_builder",
        "logging\nfrom typing import Optional\n\nfrom core"
      ],
      "exports": [
        "query",
        "_is_code_file",
        "status",
        "init",
        "export",
        "_load_config",
        "analyze",
        "visualize",
        "main",
        "cli",
        "update",
        "serve",
        "cleanup"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "fc957b14-4b15-474c-b6fb-2bd28424e7b9",
        "birth": "2025-08-07T07:23:38.073142Z",
        "parent": null,
        "intent": "CogniMap CLI - Command-line interface for architecture visualization.",
        "semantic_tags": [
          "authentication",
          "database",
          "api",
          "service",
          "utility",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T10:53:39.071849",
        "hash": "61fbcec93e4c3274",
        "language": "python",
        "type": "component"
      }
    },
    {
      "id": "9dcbae98-b924-4b2b-b7cf-c23a2f06111a",
      "filepath": "cognimap/__init__.py",
      "name": "__init__",
      "type": "component",
      "language": "python",
      "semantic_tags": [],
      "imports": [
        "cognimap.core.fingerprint",
        "cognimap.core.analyzer"
      ],
      "exports": [],
      "calls": [],
      "dependencies": [
        "cognimap/core/analyzer.py"
      ],
      "fingerprint": {
        "id": "9dcbae98-b924-4b2b-b7cf-c23a2f06111a",
        "birth": "2025-08-07T07:23:38.073794Z",
        "parent": null,
        "intent": "CogniMap - Living Architecture Visualization System",
        "semantic_tags": [],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.073826Z",
        "hash": "42d158dc",
        "language": "python",
        "type": "component"
      }
    },
    {
      "id": "86f8ab30-2e41-43f5-94c7-0031119fba08",
      "filepath": "cognimap/setup.py",
      "name": "setup",
      "type": "component",
      "language": "python",
      "semantic_tags": [
        "authentication",
        "database",
        "api",
        "testing",
        "configuration"
      ],
      "imports": [
        "setuptools"
      ],
      "exports": [],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "86f8ab30-2e41-43f5-94c7-0031119fba08",
        "birth": "2025-08-07T07:23:38.073874Z",
        "parent": null,
        "intent": "CogniMap Setup Script",
        "semantic_tags": [
          "authentication",
          "database",
          "api",
          "testing",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.074009Z",
        "hash": "9297f52a",
        "language": "python",
        "type": "component"
      }
    },
    {
      "id": "ac96c1ab-5909-4089-824f-a6f5994240bc",
      "filepath": "tools/ecosystem/taxonomy.py",
      "name": "taxonomy",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "api",
        "testing",
        "model",
        "configuration"
      ],
      "imports": [
        "enum"
      ],
      "exports": [
        "CompositeTool",
        "ToolTaxonomy",
        "create_example_composite_tool",
        "PipelineTool",
        "initialize_taxonomy",
        "AtomicTool",
        "ToolDomain",
        "ToolType",
        "ToolComplexity",
        "OrchestratedTool",
        "create_example_atomic_tools",
        "ToolMetadata",
        "BaseTool"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "ac96c1ab-5909-4089-824f-a6f5994240bc",
        "birth": "2025-08-07T07:23:38.074092Z",
        "parent": null,
        "intent": "Tool Taxonomy System for COGPLAN",
        "semantic_tags": [
          "api",
          "testing",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.074839Z",
        "hash": "dc94ee1d",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "e1b43e14-2ade-430e-ac7a-e167fba51088",
      "filepath": "tools/ecosystem/library/evolution/sql_query.py",
      "name": "sql_query",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "database",
        "api",
        "model",
        "configuration"
      ],
      "imports": [
        "asyncio\nfrom typing import Dict, Any, Optional\nfrom tools"
      ],
      "exports": [
        "SqlQueryTool"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "e1b43e14-2ade-430e-ac7a-e167fba51088",
        "birth": "2025-08-07T07:23:38.074899Z",
        "parent": null,
        "intent": "Auto-generated wrapper for sql_query",
        "semantic_tags": [
          "database",
          "api",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.075017Z",
        "hash": "3caa854a",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "19c2bbf5-71e3-4665-82f8-2f224c3be3ff",
      "filepath": "tools/ecosystem/library/evolution/document_loader.py",
      "name": "document_loader",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "api",
        "model",
        "configuration"
      ],
      "imports": [
        "asyncio\nfrom typing import Dict, Any, Optional\nfrom tools"
      ],
      "exports": [
        "DocumentLoaderTool"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "19c2bbf5-71e3-4665-82f8-2f224c3be3ff",
        "birth": "2025-08-07T07:23:38.075074Z",
        "parent": null,
        "intent": "Auto-generated wrapper for document_loader",
        "semantic_tags": [
          "api",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.075210Z",
        "hash": "503ce0a8",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "a24ee7d4-96f1-4c62-ab92-76f1f7cc54d8",
      "filepath": "tools/ecosystem/library/evolution/github.py",
      "name": "github",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "api",
        "model",
        "configuration"
      ],
      "imports": [
        "asyncio\nfrom typing import Dict, Any, Optional\nfrom tools"
      ],
      "exports": [
        "GithubTool"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "a24ee7d4-96f1-4c62-ab92-76f1f7cc54d8",
        "birth": "2025-08-07T07:23:38.075250Z",
        "parent": null,
        "intent": "Auto-generated wrapper for github",
        "semantic_tags": [
          "api",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.075378Z",
        "hash": "36c73dc2",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "5b3dce17-cbac-40a0-b2d0-64d6783975a4",
      "filepath": "tools/ecosystem/library/evolution/function_wrapper.py",
      "name": "function_wrapper",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "api",
        "model",
        "configuration"
      ],
      "imports": [
        "asyncio\nfrom typing import Dict, Any, Optional\nfrom tools"
      ],
      "exports": [
        "FunctionWrapperTool"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "5b3dce17-cbac-40a0-b2d0-64d6783975a4",
        "birth": "2025-08-07T07:23:38.075414Z",
        "parent": null,
        "intent": "Auto-generated wrapper for function_wrapper",
        "semantic_tags": [
          "api",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.075542Z",
        "hash": "d06b8b8a",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "b2e71fb2-ec53-4e38-80c3-37dff4bb3d54",
      "filepath": "tools/ecosystem/library/evolution/data_connector.py",
      "name": "data_connector",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "api",
        "model",
        "configuration"
      ],
      "imports": [
        "asyncio\nfrom typing import Dict, Any, Optional\nfrom tools"
      ],
      "exports": [
        "DataConnectorTool"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "b2e71fb2-ec53-4e38-80c3-37dff4bb3d54",
        "birth": "2025-08-07T07:23:38.075578Z",
        "parent": null,
        "intent": "Auto-generated wrapper for data_connector",
        "semantic_tags": [
          "api",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.075707Z",
        "hash": "08c35777",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "a53a1513-ddb4-4ebb-992b-4d415f8a5718",
      "filepath": "tools/ecosystem/library/evolution/sqlite.py",
      "name": "sqlite",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "database",
        "api",
        "model",
        "configuration"
      ],
      "imports": [
        "asyncio\nfrom typing import Dict, Any, Optional\nfrom tools"
      ],
      "exports": [
        "SqliteTool"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "a53a1513-ddb4-4ebb-992b-4d415f8a5718",
        "birth": "2025-08-07T07:23:38.075742Z",
        "parent": null,
        "intent": "Auto-generated wrapper for sqlite",
        "semantic_tags": [
          "database",
          "api",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.075857Z",
        "hash": "01f422fb",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "0912c582-1d75-4525-8713-6705d1c848f1",
      "filepath": "tools/ecosystem/library/evolution/rag_pipeline.py",
      "name": "rag_pipeline",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "api",
        "model",
        "configuration"
      ],
      "imports": [
        "asyncio\nfrom typing import Dict, Any, Optional\nfrom tools"
      ],
      "exports": [
        "RagPipelineTool"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "0912c582-1d75-4525-8713-6705d1c848f1",
        "birth": "2025-08-07T07:23:38.075892Z",
        "parent": null,
        "intent": "Auto-generated wrapper for rag_pipeline",
        "semantic_tags": [
          "api",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.076021Z",
        "hash": "de634467",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "d5d42715-69b7-4cf0-92d9-36686e76cdef",
      "filepath": "tools/ecosystem/library/evolution/slack.py",
      "name": "slack",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "api",
        "model",
        "configuration"
      ],
      "imports": [
        "asyncio\nfrom typing import Dict, Any, Optional\nfrom tools"
      ],
      "exports": [
        "SlackTool"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "d5d42715-69b7-4cf0-92d9-36686e76cdef",
        "birth": "2025-08-07T07:23:38.076064Z",
        "parent": null,
        "intent": "Auto-generated wrapper for slack",
        "semantic_tags": [
          "api",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.076191Z",
        "hash": "27d0f411",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "264c273b-3f2f-466a-a3f0-29f15566f6bb",
      "filepath": "tools/ecosystem/library/foundation/code_executor.py",
      "name": "code_executor",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "database",
        "api",
        "model",
        "configuration"
      ],
      "imports": [
        "typing"
      ],
      "exports": [
        "CodeExecutorTool"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "264c273b-3f2f-466a-a3f0-29f15566f6bb",
        "birth": "2025-08-07T07:23:38.076230Z",
        "parent": null,
        "intent": "Auto-generated wrapper for code_executor",
        "semantic_tags": [
          "database",
          "api",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.076347Z",
        "hash": "5075cec5",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "7ea9717e-f48e-44bd-a158-c999ac0093f3",
      "filepath": "tools/ecosystem/library/foundation/filesystem.py",
      "name": "filesystem",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "api",
        "model",
        "configuration"
      ],
      "imports": [
        "asyncio\nfrom typing import Dict, Any, Optional\nfrom tools"
      ],
      "exports": [
        "FilesystemTool"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "7ea9717e-f48e-44bd-a158-c999ac0093f3",
        "birth": "2025-08-07T07:23:38.076384Z",
        "parent": null,
        "intent": "Auto-generated wrapper for filesystem",
        "semantic_tags": [
          "api",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.076531Z",
        "hash": "4ee194e5",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "a92ec473-c6b9-4e19-a130-46565016c65c",
      "filepath": "tools/ecosystem/library/intelligence/agent_chat.py",
      "name": "agent_chat",
      "type": "agent",
      "language": "python",
      "semantic_tags": [
        "api",
        "model",
        "configuration"
      ],
      "imports": [
        "asyncio\nfrom typing import Dict, Any, Optional\nfrom tools"
      ],
      "exports": [
        "AgentChatTool"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "a92ec473-c6b9-4e19-a130-46565016c65c",
        "birth": "2025-08-07T07:23:38.076592Z",
        "parent": null,
        "intent": "Auto-generated wrapper for agent_chat",
        "semantic_tags": [
          "api",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.076805Z",
        "hash": "13485ee7",
        "language": "python",
        "type": "agent"
      }
    },
    {
      "id": "4da9e7a8-d59f-4185-80f6-a3b3066e5e8b",
      "filepath": "tools/ecosystem/library/intelligence/brave-search.py",
      "name": "brave-search",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "database",
        "api",
        "model",
        "configuration"
      ],
      "imports": [
        "asyncio\nfrom typing import Dict, Any, Optional\nfrom tools"
      ],
      "exports": [
        "Brave"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "4da9e7a8-d59f-4185-80f6-a3b3066e5e8b",
        "birth": "2025-08-07T07:23:38.076868Z",
        "parent": null,
        "intent": "Auto-generated wrapper for brave-search",
        "semantic_tags": [
          "database",
          "api",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.077095Z",
        "hash": "43759c11",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "efe40c56-d540-4f9b-8b56-15bd88c5d3ae",
      "filepath": "tools/ecosystem/library/intelligence/vector_search.py",
      "name": "vector_search",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "database",
        "api",
        "model",
        "configuration"
      ],
      "imports": [
        "asyncio\nfrom typing import Dict, Any, Optional\nfrom tools"
      ],
      "exports": [
        "VectorSearchTool"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "efe40c56-d540-4f9b-8b56-15bd88c5d3ae",
        "birth": "2025-08-07T07:23:38.077164Z",
        "parent": null,
        "intent": "Auto-generated wrapper for vector_search",
        "semantic_tags": [
          "database",
          "api",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.077338Z",
        "hash": "ba7c365d",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "6e716765-243c-4cb0-8c16-f92bec58c356",
      "filepath": "tools/ecosystem/library/intelligence/web_search.py",
      "name": "web_search",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "database",
        "api",
        "model",
        "configuration"
      ],
      "imports": [
        "asyncio\nfrom typing import Dict, Any, Optional\nfrom tools"
      ],
      "exports": [
        "WebSearchTool"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "6e716765-243c-4cb0-8c16-f92bec58c356",
        "birth": "2025-08-07T07:23:38.077384Z",
        "parent": null,
        "intent": "Auto-generated wrapper for web_search",
        "semantic_tags": [
          "database",
          "api",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.077508Z",
        "hash": "68cf7cae",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "93b1dc4e-7877-455f-a12d-ad7d26a379f2",
      "filepath": "tools/ecosystem/library/composite/research/topic_research_orchestrator.py",
      "name": "topic_research_orchestrator",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "authentication",
        "database",
        "api",
        "testing",
        "ui",
        "model",
        "utility",
        "configuration",
        "security"
      ],
      "imports": [
        "taxonomy",
        "sys\nsys",
        "asyncio\nimport json\nimport re\nfrom datetime import datetime\nfrom typing import Dict, List, Any, Set, Tuple\nfrom pathlib import Path\nimport hashlib\n\n"
      ],
      "exports": [
        "TopicResearchOrchestrator"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "93b1dc4e-7877-455f-a12d-ad7d26a379f2",
        "birth": "2025-08-07T07:23:38.077619Z",
        "parent": null,
        "intent": "Topic Research Orchestrator - Composite Tool",
        "semantic_tags": [
          "authentication",
          "database",
          "api",
          "testing",
          "ui",
          "model",
          "utility",
          "configuration",
          "security"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.078185Z",
        "hash": "8d007b35",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "88fe08c1-4088-4ca4-87bf-add63a80334b",
      "filepath": "tests/tools/test_agent_chat.py",
      "name": "test_agent_chat",
      "type": "agent",
      "language": "python",
      "semantic_tags": [
        "testing"
      ],
      "imports": [
        "pytest\nimport asyncio\nfrom tools"
      ],
      "exports": [
        "TestAgentChat"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "88fe08c1-4088-4ca4-87bf-add63a80334b",
        "birth": "2025-08-07T07:23:38.078230Z",
        "parent": null,
        "intent": "Test suite for agent_chat",
        "semantic_tags": [
          "testing"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.078298Z",
        "hash": "8ffda029",
        "language": "python",
        "type": "agent"
      }
    },
    {
      "id": "e3f2fd12-d224-454c-be90-5c70eff218ae",
      "filepath": "tests/tools/test_sql_query.py",
      "name": "test_sql_query",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "database",
        "testing"
      ],
      "imports": [
        "pytest\nimport asyncio\nfrom tools"
      ],
      "exports": [
        "TestSqlQuery"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "e3f2fd12-d224-454c-be90-5c70eff218ae",
        "birth": "2025-08-07T07:23:38.078333Z",
        "parent": null,
        "intent": "Test suite for sql_query",
        "semantic_tags": [
          "database",
          "testing"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.078390Z",
        "hash": "28674923",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "20cb6dc0-443c-4f53-bc46-937a03836346",
      "filepath": "tests/tools/test_vector_search.py",
      "name": "test_vector_search",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "testing"
      ],
      "imports": [
        "pytest\nimport asyncio\nfrom tools"
      ],
      "exports": [
        "TestVectorSearch"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "20cb6dc0-443c-4f53-bc46-937a03836346",
        "birth": "2025-08-07T07:23:38.078424Z",
        "parent": null,
        "intent": "Test suite for vector_search",
        "semantic_tags": [
          "testing"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.078493Z",
        "hash": "e24b12ae",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "353aad42-90f0-4086-be32-a0315300b790",
      "filepath": "tests/tools/test_brave-search.py",
      "name": "test_brave-search",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "testing"
      ],
      "imports": [
        "pytest\nimport asyncio\nfrom tools"
      ],
      "exports": [
        "TestBraveSearch"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "353aad42-90f0-4086-be32-a0315300b790",
        "birth": "2025-08-07T07:23:38.078526Z",
        "parent": null,
        "intent": "Test suite for brave-search",
        "semantic_tags": [
          "testing"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.078591Z",
        "hash": "43da0aae",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "7d1f0b8c-02c6-445f-b921-f00c83cb3076",
      "filepath": "tests/tools/test_code_executor.py",
      "name": "test_code_executor",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "testing"
      ],
      "imports": [
        "pytest\nimport asyncio\nfrom tools"
      ],
      "exports": [
        "TestCodeExecutor"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "7d1f0b8c-02c6-445f-b921-f00c83cb3076",
        "birth": "2025-08-07T07:23:38.078624Z",
        "parent": null,
        "intent": "Test suite for code_executor",
        "semantic_tags": [
          "testing"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.078691Z",
        "hash": "5b8ad617",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "de408d1c-d97a-4429-add0-bdcbf9a1d0b9",
      "filepath": "tests/tools/test_github.py",
      "name": "test_github",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "testing"
      ],
      "imports": [
        "pytest\nimport asyncio\nfrom tools"
      ],
      "exports": [
        "TestGithub"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "de408d1c-d97a-4429-add0-bdcbf9a1d0b9",
        "birth": "2025-08-07T07:23:38.078723Z",
        "parent": null,
        "intent": "Test suite for github",
        "semantic_tags": [
          "testing"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.078781Z",
        "hash": "f3461409",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "5f8b8ce1-ba8a-443e-9448-1574299a801b",
      "filepath": "tests/tools/test_slack.py",
      "name": "test_slack",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "testing"
      ],
      "imports": [
        "pytest\nimport asyncio\nfrom tools"
      ],
      "exports": [
        "TestSlack"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "5f8b8ce1-ba8a-443e-9448-1574299a801b",
        "birth": "2025-08-07T07:23:38.078813Z",
        "parent": null,
        "intent": "Test suite for slack",
        "semantic_tags": [
          "testing"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.078871Z",
        "hash": "c6c7580e",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "313e8070-f3ad-4828-aeaf-91c4f522788f",
      "filepath": "tests/tools/test_document_loader.py",
      "name": "test_document_loader",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "testing"
      ],
      "imports": [
        "pytest\nimport asyncio\nfrom tools"
      ],
      "exports": [
        "TestDocumentLoader"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "313e8070-f3ad-4828-aeaf-91c4f522788f",
        "birth": "2025-08-07T07:23:38.078912Z",
        "parent": null,
        "intent": "Test suite for document_loader",
        "semantic_tags": [
          "testing"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.078982Z",
        "hash": "2c1b7f6b",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "a39c08f8-ef09-47e5-b35e-6bab1859cddd",
      "filepath": "tests/tools/test_web_search.py",
      "name": "test_web_search",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "testing"
      ],
      "imports": [
        "pytest\nimport asyncio\nfrom tools"
      ],
      "exports": [
        "TestWebSearch"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "a39c08f8-ef09-47e5-b35e-6bab1859cddd",
        "birth": "2025-08-07T07:23:38.079018Z",
        "parent": null,
        "intent": "Test suite for web_search",
        "semantic_tags": [
          "testing"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.079083Z",
        "hash": "e2b70190",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "bd0bb470-b954-44fb-81ad-7a7e33b67daf",
      "filepath": "tests/tools/test_integration_test.py",
      "name": "test_integration_test",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "testing"
      ],
      "imports": [],
      "exports": [],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "bd0bb470-b954-44fb-81ad-7a7e33b67daf",
        "birth": "2025-08-07T07:23:38.079117Z",
        "parent": null,
        "intent": "test",
        "semantic_tags": [
          "testing"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.079129Z",
        "hash": "47d1c011",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "1630e985-5f81-479c-9102-095764c8efb0",
      "filepath": "tests/tools/test_sqlite.py",
      "name": "test_sqlite",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "database",
        "testing"
      ],
      "imports": [
        "pytest\nimport asyncio\nfrom tools"
      ],
      "exports": [
        "TestSqlite"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "1630e985-5f81-479c-9102-095764c8efb0",
        "birth": "2025-08-07T07:23:38.079162Z",
        "parent": null,
        "intent": "Test suite for sqlite",
        "semantic_tags": [
          "database",
          "testing"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.079214Z",
        "hash": "57359b68",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "52c781da-fd36-4b24-9569-4f724db2bebe",
      "filepath": "tests/tools/test_data_connector.py",
      "name": "test_data_connector",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "testing"
      ],
      "imports": [
        "pytest\nimport asyncio\nfrom tools"
      ],
      "exports": [
        "TestDataConnector"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "52c781da-fd36-4b24-9569-4f724db2bebe",
        "birth": "2025-08-07T07:23:38.079246Z",
        "parent": null,
        "intent": "Test suite for data_connector",
        "semantic_tags": [
          "testing"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.079309Z",
        "hash": "6a7ae4ce",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "766ec664-9104-48c2-903e-715f10b14e40",
      "filepath": "tests/tools/test_rag_pipeline.py",
      "name": "test_rag_pipeline",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "testing"
      ],
      "imports": [
        "pytest\nimport asyncio\nfrom tools"
      ],
      "exports": [
        "TestRagPipeline"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "766ec664-9104-48c2-903e-715f10b14e40",
        "birth": "2025-08-07T07:23:38.079341Z",
        "parent": null,
        "intent": "Test suite for rag_pipeline",
        "semantic_tags": [
          "testing"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.079401Z",
        "hash": "2799fe20",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "86606984-525d-433d-97f0-f6daef558fab",
      "filepath": "tests/tools/test_function_wrapper.py",
      "name": "test_function_wrapper",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "testing"
      ],
      "imports": [
        "pytest\nimport asyncio\nfrom tools"
      ],
      "exports": [
        "TestFunctionWrapper"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "86606984-525d-433d-97f0-f6daef558fab",
        "birth": "2025-08-07T07:23:38.079433Z",
        "parent": null,
        "intent": "Test suite for function_wrapper",
        "semantic_tags": [
          "testing"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.079495Z",
        "hash": "67f6f807",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "e7500dba-0494-428e-98bf-0c6a2be10892",
      "filepath": "tests/tools/test_filesystem.py",
      "name": "test_filesystem",
      "type": "tool",
      "language": "python",
      "semantic_tags": [
        "testing"
      ],
      "imports": [
        "pytest\nimport asyncio\nfrom tools"
      ],
      "exports": [
        "TestFilesystem"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "e7500dba-0494-428e-98bf-0c6a2be10892",
        "birth": "2025-08-07T07:23:38.079527Z",
        "parent": null,
        "intent": "Test suite for filesystem",
        "semantic_tags": [
          "testing"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.079588Z",
        "hash": "6d32d314",
        "language": "python",
        "type": "tool"
      }
    },
    {
      "id": "e4fa21cd-711b-47a6-9b70-0044b4690ce2",
      "filepath": "tests/integration/test_all_components.py",
      "name": "test_all_components",
      "type": "test",
      "language": "python",
      "semantic_tags": [
        "database",
        "api",
        "testing",
        "ui",
        "service",
        "model",
        "configuration"
      ],
      "imports": [
        "asyncio\nimport json\nimport sys\nimport pytest\nimport traceback\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import Dict, List, Any, Tuple\n\n"
      ],
      "exports": [
        "log_test",
        "generate_report"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "e4fa21cd-711b-47a6-9b70-0044b4690ce2",
        "birth": "2025-08-07T07:23:38.079687Z",
        "parent": null,
        "intent": "Comprehensive System Testing Suite for COGPLAN/UMA-V2",
        "semantic_tags": [
          "database",
          "api",
          "testing",
          "ui",
          "service",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.080322Z",
        "hash": "219dc346",
        "language": "python",
        "type": "test"
      }
    },
    {
      "id": "123",
      "filepath": "tests/cognimap/test_fingerprint_updater.py",
      "name": "test_fingerprint_updater",
      "type": "component",
      "language": "python",
      "semantic_tags": [
        "demo"
      ],
      "imports": [
        "tempfile\nfrom pathlib import Path\nfrom AUDIT_COGNIMAP"
      ],
      "exports": [
        "read_fp",
        "test_updater_updates_and_idempotent"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "123",
        "birth": "2024-01-01T00:00:00",
        "parent": null,
        "intent": "sample",
        "semantic_tags": [
          "demo"
        ],
        "version": "0.1.0",
        "last_sync": "2024-01-01T00:00:00",
        "hash": "deadbeef",
        "language": "python",
        "type": "component"
      }
    },
    {
      "id": "09878737-4c5b-4ec8-b7e9-00678311f59c",
      "filepath": "src/agents/codegen_agent.py",
      "name": "codegen_agent",
      "type": "agent",
      "language": "python",
      "semantic_tags": [
        "database",
        "api",
        "testing",
        "service",
        "model",
        "configuration"
      ],
      "imports": [
        "services.pricing_calculator",
        "asyncio\nimport json\nimport logging\nfrom datetime import datetime, timezone\nfrom typing import Dict, List, Any, Optional\nfrom dataclasses import dataclass, asdict\nfrom enum import Enum\nfrom pathlib import Path\n\nlogger ",
        "asyncio\nfrom typing import List, Dict, Any\nfrom datetime import datetime\nimport logging\n\nfrom models",
        "fastapi",
        "pydantic",
        "json\nimport asyncio\nfrom typing import Any, Optional\nimport logging\n\nlogger ",
        "express from ",
        "pytest\nimport asyncio\nfrom pathlib import Path\nimport sys\n\n"
      ],
      "exports": [
        "PricingRequest",
        "PriceQuote",
        "PricingResponse",
        "GeneratedCode",
        "RedisCache",
        "Implementation",
        "CodeLanguage",
        "FrameworkType",
        "PricingCalculator",
        "CustomerTier",
        "CodegenAgent"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "09878737-4c5b-4ec8-b7e9-00678311f59c",
        "birth": "2025-08-07T07:23:38.080403Z",
        "parent": null,
        "intent": "Codegen Agent - Generates code implementations from plans.",
        "semantic_tags": [
          "database",
          "api",
          "testing",
          "service",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.081216Z",
        "hash": "376fe735",
        "language": "python",
        "type": "agent"
      }
    },
    {
      "id": "53455a39-4303-412e-9707-87a5b064dff3",
      "filepath": "src/agents/tool_hunter_agent.py",
      "name": "tool_hunter_agent",
      "type": "agent",
      "language": "python",
      "semantic_tags": [
        "authentication",
        "database",
        "api",
        "testing",
        "ui",
        "model",
        "configuration",
        "security"
      ],
      "imports": [
        "asyncio\nimport json\nimport hashlib\nimport re\nfrom datetime import datetime, timedelta\nfrom pathlib import Path\nfrom typing import Dict, List, Any, Optional, Tuple\nfrom dataclasses import dataclass, asdict\nfrom enum import Enum\nimport yaml\nimport aiohttp\nfrom urllib",
        "pytest\nimport asyncio\nfrom tools",
        "asyncio\nfrom typing import Dict, Any, Optional\nfrom tools"
      ],
      "exports": [
        "Test",
        "ToolProtocol",
        "DiscoveredTool",
        "ToolPattern",
        "ToolHunterAgent",
        "TestResult",
        "AdaptedTool",
        "TrustLevel"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "53455a39-4303-412e-9707-87a5b064dff3",
        "birth": "2025-08-07T07:23:38.081393Z",
        "parent": null,
        "intent": "Tool Hunter Agent - COGPLAN's Autonomous Tool Discovery and Integration System",
        "semantic_tags": [
          "authentication",
          "database",
          "api",
          "testing",
          "ui",
          "model",
          "configuration",
          "security"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.082297Z",
        "hash": "c56452a9",
        "language": "python",
        "type": "agent"
      }
    },
    {
      "id": "229fb59d-7e02-44cf-9af2-b314ad00c87f",
      "filepath": "src/agents/__init__.py",
      "name": "__init__",
      "type": "agent",
      "language": "python",
      "semantic_tags": [],
      "imports": [],
      "exports": [],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "229fb59d-7e02-44cf-9af2-b314ad00c87f",
        "birth": "2025-08-07T07:23:38.082391Z",
        "parent": null,
        "intent": "Purpose to be determined",
        "semantic_tags": [],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.082409Z",
        "hash": "e3b0c442",
        "language": "python",
        "type": "agent"
      }
    },
    {
      "id": "332cf672-f9ed-4327-9753-dbd78113f1fc",
      "filepath": "src/agents/planner_agent.py",
      "name": "planner_agent",
      "type": "agent",
      "language": "python",
      "semantic_tags": [
        "authentication",
        "api",
        "testing",
        "ui",
        "service",
        "model",
        "configuration",
        "security"
      ],
      "imports": [
        "asyncio\nimport json\nimport logging\nfrom datetime import datetime, timezone\nfrom typing import Dict, List, Any, Optional\nfrom dataclasses import dataclass, asdict\nfrom enum import Enum\n\nlogger "
      ],
      "exports": [
        "PlannerAgent",
        "TaskPlan",
        "TaskComplexity"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "332cf672-f9ed-4327-9753-dbd78113f1fc",
        "birth": "2025-08-07T07:23:38.082496Z",
        "parent": null,
        "intent": "Planner Agent - Decomposes tasks into actionable plans for other agents.",
        "semantic_tags": [
          "authentication",
          "api",
          "testing",
          "ui",
          "service",
          "model",
          "configuration",
          "security"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.082988Z",
        "hash": "80121d38",
        "language": "python",
        "type": "agent"
      }
    },
    {
      "id": "0dfb9b60-f130-481b-93b2-eaf095536113",
      "filepath": "evolution/runtime/agent_runtime.py",
      "name": "agent_runtime",
      "type": "agent",
      "language": "python",
      "semantic_tags": [
        "api",
        "testing",
        "ui",
        "service",
        "utility",
        "configuration"
      ],
      "imports": [
        "common.kafka_utils",
        "asyncio\nimport logging\nimport os\nimport signal\nimport sys\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional, Type\nimport json\n\n"
      ],
      "exports": [
        "AgentRuntime",
        "AgentSpawner",
        "TestAgent"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "0dfb9b60-f130-481b-93b2-eaf095536113",
        "birth": "2025-08-07T07:23:38.083084Z",
        "parent": null,
        "intent": "Agent Runtime - Manages agent lifecycle and Kafka I/O.",
        "semantic_tags": [
          "api",
          "testing",
          "ui",
          "service",
          "utility",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.083660Z",
        "hash": "670b7c05",
        "language": "python",
        "type": "agent"
      }
    },
    {
      "id": "888bd125-d504-400f-9bd9-ee0c3e3cfff1",
      "filepath": "evolution/orchestrator/evo_orchestrator_wired.py",
      "name": "evo_orchestrator_wired",
      "type": "component",
      "language": "python",
      "semantic_tags": [
        "api",
        "testing",
        "ui",
        "utility",
        "configuration"
      ],
      "imports": [
        "runtime.agent_runtime",
        "agents.architect_agent.architect",
        "agents.treasurer_agent.treasurer",
        "asyncio\nimport logging\nimport yaml\nimport os\nimport sys\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import Dict, List, Any, Optional\nfrom dotenv import load_dotenv\n\n",
        "agents.external_auditor.auditor"
      ],
      "exports": [
        "WiredEvolutionOrchestrator"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "888bd125-d504-400f-9bd9-ee0c3e3cfff1",
        "birth": "2025-08-07T07:23:38.083733Z",
        "parent": null,
        "intent": "Evolution Orchestrator with Kafka Integration - Coordinates the daily evolution cycle.",
        "semantic_tags": [
          "api",
          "testing",
          "ui",
          "utility",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.084408Z",
        "hash": "e922c6a0",
        "language": "python",
        "type": "component"
      }
    },
    {
      "id": "50c3ca98-21ee-44e2-85cd-af63d7d36215",
      "filepath": "evolution/orchestrator/evo_orchestrator.py",
      "name": "evo_orchestrator",
      "type": "component",
      "language": "python",
      "semantic_tags": [
        "ui",
        "model",
        "configuration"
      ],
      "imports": [
        "sys\nsys",
        "agents.architect_agent.architect",
        "agents.external_auditor.auditor",
        "agents.treasurer_agent.treasurer",
        "asyncio\nimport logging\nimport yaml\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import Dict, List, Any, Optional\n\n"
      ],
      "exports": [
        "EvolutionOrchestrator"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "50c3ca98-21ee-44e2-85cd-af63d7d36215",
        "birth": "2025-08-07T07:23:38.084517Z",
        "parent": null,
        "intent": "Evolution Orchestrator - Coordinates the daily evolution cycle.",
        "semantic_tags": [
          "ui",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.085151Z",
        "hash": "22f9a6dc",
        "language": "python",
        "type": "component"
      }
    },
    {
      "id": "a134fe9e-5b6e-4266-9724-9a5f8bae57d3",
      "filepath": "evolution/tests/test_aether_sprint_3.py",
      "name": "test_aether_sprint_3",
      "type": "test",
      "language": "python",
      "semantic_tags": [
        "testing",
        "ui",
        "configuration"
      ],
      "imports": [
        "asyncio\nimport pytest\nfrom datetime import datetime\nfrom uuid import uuid4\nimport sys\nfrom pathlib import Path\n\n"
      ],
      "exports": [
        "TestResonanceAnalyzer",
        "test_pattern_energy",
        "TestUnifiedField",
        "test_harmonic_relationships",
        "test_consciousness_formula",
        "TestIntegration"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "a134fe9e-5b6e-4266-9724-9a5f8bae57d3",
        "birth": "2025-08-07T07:23:38.085271Z",
        "parent": null,
        "intent": "Test Suite for Sprint 3: Resonance & Unification",
        "semantic_tags": [
          "testing",
          "ui",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.086116Z",
        "hash": "334cd481",
        "language": "python",
        "type": "test"
      }
    },
    {
      "id": "32533c6d-fc4f-4f0b-8105-ce049ce1d3fe",
      "filepath": "evolution/treasury/init_wallet.py",
      "name": "init_wallet",
      "type": "component",
      "language": "python",
      "semantic_tags": [
        "database",
        "configuration"
      ],
      "imports": [
        "json\nimport argparse\nfrom datetime import datetime\nfrom pathlib import Path\n\n\ndef initialize_wallet"
      ],
      "exports": [
        "initialize_wallet",
        "main"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "32533c6d-fc4f-4f0b-8105-ce049ce1d3fe",
        "birth": "2025-08-07T07:23:38.086164Z",
        "parent": null,
        "intent": "Initialize the Evolution Treasury wallet with seed budget.",
        "semantic_tags": [
          "database",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.086344Z",
        "hash": "70c60404",
        "language": "python",
        "type": "component"
      }
    },
    {
      "id": "499cdb51-c944-4dcf-a788-90deb99ebc3a",
      "filepath": "evolution/treasury/crypto_wallet.py",
      "name": "crypto_wallet",
      "type": "component",
      "language": "python",
      "semantic_tags": [
        "authentication",
        "database",
        "api",
        "testing",
        "service",
        "configuration",
        "security"
      ],
      "imports": [
        "json\nimport logging\nfrom datetime import datetime\nfrom typing import Dict, List, Optional, Any\nfrom pathlib import Path\nfrom decimal import Decimal\n\nlogger "
      ],
      "exports": [
        "CryptoWalletManager"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "499cdb51-c944-4dcf-a788-90deb99ebc3a",
        "birth": "2025-08-07T07:23:38.086409Z",
        "parent": null,
        "intent": "Crypto Wallet Manager for Evolution Treasury - Blockchain native economy.",
        "semantic_tags": [
          "authentication",
          "database",
          "api",
          "testing",
          "service",
          "configuration",
          "security"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.086973Z",
        "hash": "38b7dc45",
        "language": "python",
        "type": "component"
      }
    },
    {
      "id": "ebead0cd-ae33-44cb-80c8-9123070e08b1",
      "filepath": "evolution/aether/polarity_migration.py",
      "name": "polarity_migration",
      "type": "component",
      "language": "python",
      "semantic_tags": [
        "database",
        "testing",
        "ui",
        "model",
        "configuration"
      ],
      "imports": [
        "asyncio\nimport json\nimport logging\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import Dict, Any, List, Optional\n\n"
      ],
      "exports": [
        "PolarityMigration"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "ebead0cd-ae33-44cb-80c8-9123070e08b1",
        "birth": "2025-08-07T07:23:38.087091Z",
        "parent": null,
        "intent": "Polarity Migration Script",
        "semantic_tags": [
          "database",
          "testing",
          "ui",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.087532Z",
        "hash": "c3dd2f03",
        "language": "python",
        "type": "component"
      }
    },
    {
      "id": "47eed971-96dd-4a73-9497-4fda4f95f99c",
      "filepath": "evolution/aether/resonance_analyzer.py",
      "name": "resonance_analyzer",
      "type": "component",
      "language": "python",
      "semantic_tags": [
        "database",
        "testing",
        "ui",
        "model",
        "configuration",
        "security"
      ],
      "imports": [
        "pydantic",
        "asyncio\nimport hashlib\nimport logging\nimport math\nfrom collections import defaultdict, Counter\nfrom datetime import datetime, timedelta\nfrom enum import Enum\nfrom typing import Dict, Any, List, Optional, Tuple, Set\nfrom uuid import UUID, uuid4\n\ntry"
      ],
      "exports": [
        "ResonanceAnalyzer",
        "ResonancePattern",
        "PatternType",
        "InterferenceType"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "47eed971-96dd-4a73-9497-4fda4f95f99c",
        "birth": "2025-08-07T07:23:38.087683Z",
        "parent": null,
        "intent": "Resonance Analyzer - Pattern Detection and Harmonic Analysis",
        "semantic_tags": [
          "database",
          "testing",
          "ui",
          "model",
          "configuration",
          "security"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.088569Z",
        "hash": "726a46a2",
        "language": "python",
        "type": "component"
      }
    },
    {
      "id": "8efd9a87-0f22-4106-bd4c-66e6988bf048",
      "filepath": "evolution/aether/polarity_embedder.py",
      "name": "polarity_embedder",
      "type": "service",
      "language": "python",
      "semantic_tags": [
        "database",
        "testing",
        "ui",
        "service",
        "model",
        "configuration"
      ],
      "imports": [
        "evolution.aether.enhanced_events",
        "semloop_models",
        "asyncio\nimport json\nimport logging\nimport os\nimport sys\nfrom typing import Any, Dict, Optional, List\nfrom uuid import UUID\nfrom pathlib import Path\n\n"
      ],
      "exports": [
        "MigratedEmbedderService",
        "PolarityAwareEmbedder"
      ],
      "calls": [],
      "dependencies": [
        "evolution/aether/enhanced_events.py",
        "semloop_models/__init__.py"
      ],
      "fingerprint": {
        "id": "8efd9a87-0f22-4106-bd4c-66e6988bf048",
        "birth": "2025-08-07T07:23:38.088707Z",
        "parent": null,
        "intent": "Polarity-Aware Embedder Service",
        "semantic_tags": [
          "database",
          "testing",
          "ui",
          "service",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.089164Z",
        "hash": "5e37c46c",
        "language": "python",
        "type": "service"
      }
    },
    {
      "id": "6b251604-ed7d-4754-a098-8c9b2ac3350f",
      "filepath": "evolution/aether/enhanced_events.py",
      "name": "enhanced_events",
      "type": "component",
      "language": "python",
      "semantic_tags": [
        "api",
        "testing",
        "ui",
        "model",
        "configuration",
        "security"
      ],
      "imports": [
        "datetime",
        "sys\nimport os\nsys",
        "semloop_models.event_envelope"
      ],
      "exports": [
        "AetherEventEnvelope",
        "AetherEventMeta",
        "IntentAwareEventPublisher"
      ],
      "calls": [],
      "dependencies": [
        "semloop_models/event_envelope.py"
      ],
      "fingerprint": {
        "id": "6b251604-ed7d-4754-a098-8c9b2ac3350f",
        "birth": "2025-08-07T07:23:38.089248Z",
        "parent": null,
        "intent": "Enhanced Event System with Aether Protocol Integration",
        "semantic_tags": [
          "api",
          "testing",
          "ui",
          "model",
          "configuration",
          "security"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.089648Z",
        "hash": "73682a0a",
        "language": "python",
        "type": "component"
      }
    },
    {
      "id": "963c2346-7b0b-4a52-b2b9-1e05f79b081d",
      "filepath": "evolution/aether/intent_substrate.py",
      "name": "intent_substrate",
      "type": "component",
      "language": "python",
      "semantic_tags": [
        "database",
        "testing",
        "model",
        "configuration"
      ],
      "imports": [
        "asyncio\nimport json\nfrom datetime import datetime\nfrom enum import Enum\nfrom typing import Dict, List, Optional, Any\nfrom uuid import UUID, uuid4\nfrom pydantic import BaseModel, Field\n\n"
      ],
      "exports": [
        "IntentSubstrate",
        "IntentType",
        "Intent",
        "GestationPhase"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "963c2346-7b0b-4a52-b2b9-1e05f79b081d",
        "birth": "2025-08-07T07:23:38.089767Z",
        "parent": null,
        "intent": "Intent Substrate - The Consciousness Layer of the Aether Protocol",
        "semantic_tags": [
          "database",
          "testing",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.090599Z",
        "hash": "79bf9dc2",
        "language": "python",
        "type": "component"
      }
    },
    {
      "id": "42db8456-7955-4974-a701-5b55172ead3e",
      "filepath": "evolution/aether/intent_orchestrator.py",
      "name": "intent_orchestrator",
      "type": "component",
      "language": "python",
      "semantic_tags": [
        "authentication",
        "database",
        "testing",
        "ui",
        "service",
        "configuration",
        "security"
      ],
      "imports": [
        "orchestrator.evo_orchestrator_wired",
        "asyncio\nimport logging\nimport os\nimport sys\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import Dict, List, Any, Optional\nfrom uuid import UUID\n\n",
        "aether.intent_substrate"
      ],
      "exports": [
        "IntentAwareEvolutionOrchestrator"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "42db8456-7955-4974-a701-5b55172ead3e",
        "birth": "2025-08-07T07:23:38.090769Z",
        "parent": null,
        "intent": "Intent-Aware Evolution Orchestrator",
        "semantic_tags": [
          "authentication",
          "database",
          "testing",
          "ui",
          "service",
          "configuration",
          "security"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.091417Z",
        "hash": "947b3cd9",
        "language": "python",
        "type": "component"
      }
    },
    {
      "id": "3d5bff7d-7987-453e-ad92-d34e1b282b20",
      "filepath": "evolution/aether/karma_agent_runtime.py",
      "name": "karma_agent_runtime",
      "type": "agent",
      "language": "python",
      "semantic_tags": [
        "database",
        "api",
        "testing",
        "ui",
        "configuration",
        "security"
      ],
      "imports": [
        "asyncio\nimport logging\nfrom datetime import datetime\nfrom typing import Dict, Any, Optional, List\nfrom uuid import UUID\nimport sys\nfrom pathlib import Path\n\n"
      ],
      "exports": [
        "KarmaAwareAgentRuntime",
        "MockKarmicOrchestrator"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "3d5bff7d-7987-453e-ad92-d34e1b282b20",
        "birth": "2025-08-07T07:23:38.091570Z",
        "parent": null,
        "intent": "Karma-Aware Agent Runtime",
        "semantic_tags": [
          "database",
          "api",
          "testing",
          "ui",
          "configuration",
          "security"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.092076Z",
        "hash": "fa7f2676",
        "language": "python",
        "type": "agent"
      }
    },
    {
      "id": "10d6be64-d8f2-48a3-ad99-b52f0a7392a9",
      "filepath": "evolution/aether/unified_field.py",
      "name": "unified_field",
      "type": "component",
      "language": "python",
      "semantic_tags": [
        "database",
        "testing",
        "ui",
        "model",
        "utility",
        "configuration"
      ],
      "imports": [
        "pydantic",
        "asyncio\nimport logging\nimport math\nfrom datetime import datetime, timedelta\nfrom enum import Enum\nfrom typing import Dict, Any, List, Optional, Tuple\nfrom uuid import UUID\n\ntry"
      ],
      "exports": [
        "FieldState",
        "UnifiedField",
        "ConsciousnessState"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "10d6be64-d8f2-48a3-ad99-b52f0a7392a9",
        "birth": "2025-08-07T07:23:38.092194Z",
        "parent": null,
        "intent": "Unified Field Calculator - The Crown of the Aether Protocol",
        "semantic_tags": [
          "database",
          "testing",
          "ui",
          "model",
          "utility",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.093155Z",
        "hash": "8778c36c",
        "language": "python",
        "type": "component"
      }
    },
    {
      "id": "9671c758-8606-4573-a9ff-5c3a0b0d14f1",
      "filepath": "evolution/aether/karmic_orchestrator.py",
      "name": "karmic_orchestrator",
      "type": "component",
      "language": "python",
      "semantic_tags": [
        "database",
        "api",
        "testing",
        "ui",
        "model",
        "configuration",
        "security"
      ],
      "imports": [
        "pydantic",
        "asyncio\nimport json\nimport logging\nfrom datetime import datetime, timedelta\nfrom enum import Enum\nfrom typing import Dict, Any, List, Optional, Tuple\nfrom uuid import UUID, uuid4\ntry"
      ],
      "exports": [
        "KarmicAction",
        "KarmaCategory",
        "KarmicOrchestrator",
        "ActionType"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "9671c758-8606-4573-a9ff-5c3a0b0d14f1",
        "birth": "2025-08-07T07:23:38.093313Z",
        "parent": null,
        "intent": "Karmic Orchestrator - The Balance Layer of the Aether Protocol",
        "semantic_tags": [
          "database",
          "api",
          "testing",
          "ui",
          "model",
          "configuration",
          "security"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.093803Z",
        "hash": "b0ef3746",
        "language": "python",
        "type": "component"
      }
    },
    {
      "id": "659a3353-0c5e-4cdb-9e3d-d626bfe66a87",
      "filepath": "evolution/aether/polarity_calculator.py",
      "name": "polarity_calculator",
      "type": "component",
      "language": "python",
      "semantic_tags": [
        "database",
        "api",
        "testing",
        "utility",
        "configuration"
      ],
      "imports": [
        "re\nfrom typing import Dict, Any, List, Optional, Tuple\nfrom enum import Enum\nfrom datetime import datetime\nimport json\n\n\nclass PolarityFactors"
      ],
      "exports": [
        "PolarityThreshold",
        "calculate_aggregate_polarity",
        "PolarityCalculator",
        "migrate_garbage_to_polarity",
        "PolarityFactors"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "659a3353-0c5e-4cdb-9e3d-d626bfe66a87",
        "birth": "2025-08-07T07:23:38.093923Z",
        "parent": null,
        "intent": "Polarity Calculator - The Feeling Layer of the Aether Protocol",
        "semantic_tags": [
          "database",
          "api",
          "testing",
          "utility",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.094659Z",
        "hash": "fbf066dd",
        "language": "python",
        "type": "component"
      }
    },
    {
      "id": "7c9a4f19-ec45-4eb4-9809-eba0a89b7c21",
      "filepath": "evolution/common/kafka_utils.py",
      "name": "kafka_utils",
      "type": "component",
      "language": "python",
      "semantic_tags": [
        "testing",
        "service",
        "utility",
        "configuration"
      ],
      "imports": [
        "asyncio\nimport json\nimport logging\nfrom typing import Dict, Any, Optional, Callable, List\nfrom datetime import datetime\nimport os\n\n"
      ],
      "exports": [
        "KafkaIntegration",
        "get_kafka"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "7c9a4f19-ec45-4eb4-9809-eba0a89b7c21",
        "birth": "2025-08-07T07:23:38.094742Z",
        "parent": null,
        "intent": "Kafka/Redpanda integration utilities for Evolution Engine.",
        "semantic_tags": [
          "testing",
          "service",
          "utility",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.095203Z",
        "hash": "0f2ce399",
        "language": "python",
        "type": "component"
      }
    },
    {
      "id": "07bd99c5-764e-4dda-a59c-fc43bf300707",
      "filepath": "evolution/agents/architect_agent/architect.py",
      "name": "architect",
      "type": "agent",
      "language": "python",
      "semantic_tags": [
        "authentication",
        "database",
        "api",
        "testing",
        "ui",
        "configuration",
        "security"
      ],
      "imports": [
        "logging\nimport yaml\nfrom datetime import datetime\nfrom typing import Dict, List, Any, Optional\n\nlogger "
      ],
      "exports": [
        "ArchitectAgent"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "07bd99c5-764e-4dda-a59c-fc43bf300707",
        "birth": "2025-08-07T07:23:38.095288Z",
        "parent": null,
        "intent": "Architect Agent - Vision guardian and strategic decision maker.",
        "semantic_tags": [
          "authentication",
          "database",
          "api",
          "testing",
          "ui",
          "configuration",
          "security"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.095775Z",
        "hash": "11d9aace",
        "language": "python",
        "type": "agent"
      }
    },
    {
      "id": "83a92304-0adb-4f9b-933f-7d2e6302f11d",
      "filepath": "evolution/agents/external_auditor/auditor.py",
      "name": "auditor",
      "type": "agent",
      "language": "python",
      "semantic_tags": [
        "api",
        "testing",
        "service",
        "model",
        "utility",
        "configuration",
        "security"
      ],
      "imports": [
        "json\nimport logging\nfrom datetime import datetime\nfrom typing import Dict, List, Any\nfrom pathlib import Path\n\nlogger "
      ],
      "exports": [
        "ExternalAuditor"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "83a92304-0adb-4f9b-933f-7d2e6302f11d",
        "birth": "2025-08-07T07:23:38.095818Z",
        "parent": null,
        "intent": "External Auditor Agent - Fresh perspective analysis of the system.",
        "semantic_tags": [
          "api",
          "testing",
          "service",
          "model",
          "utility",
          "configuration",
          "security"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.096055Z",
        "hash": "c53f8561",
        "language": "python",
        "type": "agent"
      }
    },
    {
      "id": "80feed09-906e-42cc-8252-131456361d86",
      "filepath": "evolution/agents/treasurer_agent/treasurer.py",
      "name": "treasurer",
      "type": "agent",
      "language": "python",
      "semantic_tags": [
        "api",
        "service",
        "configuration"
      ],
      "imports": [
        "json\nimport logging\nfrom datetime import datetime, timedelta\nfrom typing import Dict, List, Any, Optional\nfrom pathlib import Path\n\nlogger "
      ],
      "exports": [
        "TreasurerAgent"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "80feed09-906e-42cc-8252-131456361d86",
        "birth": "2025-08-07T07:23:38.096128Z",
        "parent": null,
        "intent": "Treasurer Agent - Economic management and revenue generation.",
        "semantic_tags": [
          "api",
          "service",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.096916Z",
        "hash": "8940cfb5",
        "language": "python",
        "type": "agent"
      }
    },
    {
      "id": "7eb5a2d8-916d-4cdc-b02b-e6c6c791b202",
      "filepath": "evolution/agents/discussion_agent/reviewer.py",
      "name": "reviewer",
      "type": "agent",
      "language": "python",
      "semantic_tags": [
        "database",
        "api",
        "ui",
        "service",
        "model",
        "configuration",
        "security"
      ],
      "imports": [
        "logging\nfrom datetime import datetime\nfrom typing import Dict, List, Any, Tuple\n\nlogger "
      ],
      "exports": [
        "DiscussionAgent"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "7eb5a2d8-916d-4cdc-b02b-e6c6c791b202",
        "birth": "2025-08-07T07:23:38.096972Z",
        "parent": null,
        "intent": "Discussion Agent - Pragmatic review and feasibility analysis.",
        "semantic_tags": [
          "database",
          "api",
          "ui",
          "service",
          "model",
          "configuration",
          "security"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.097386Z",
        "hash": "7afdc0dc",
        "language": "python",
        "type": "agent"
      }
    },
    {
      "id": "9a657298-9fc8-4a2b-8356-7dfa2dc737a9",
      "filepath": "evolution/agents/implementor_agent/implementor.py",
      "name": "implementor",
      "type": "agent",
      "language": "python",
      "semantic_tags": [
        "database",
        "api",
        "testing",
        "service",
        "model",
        "configuration"
      ],
      "imports": [
        "asyncio\nfrom concurrent",
        "time\n\nclass OptimizedProcessor",
        "os\nimport logging\nimport subprocess\nimport tempfile\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import Dict, Any, List, Optional\n\nlogger ",
        "fastapi"
      ],
      "exports": [
        "AnalysisResponse",
        "AnalysisRequest",
        "EvolutionImplementation",
        "ImplementorAgent",
        "OptimizedProcessor"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "9a657298-9fc8-4a2b-8356-7dfa2dc737a9",
        "birth": "2025-08-07T07:23:38.097468Z",
        "parent": null,
        "intent": "Implementor Agent - Executes approved changes in sandboxed environment.",
        "semantic_tags": [
          "database",
          "api",
          "testing",
          "service",
          "model",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.097897Z",
        "hash": "4b5c3530",
        "language": "python",
        "type": "agent"
      }
    },
    {
      "id": "b8accef2-d575-40be-8c93-dfa8f4dfc0ae",
      "filepath": "cognimap/collectors/__init__.py",
      "name": "__init__",
      "type": "component",
      "language": "python",
      "semantic_tags": [],
      "imports": [
        "cognimap.collectors.serena_collector"
      ],
      "exports": [],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "b8accef2-d575-40be-8c93-dfa8f4dfc0ae",
        "birth": "2025-08-07T07:23:38.098787Z",
        "parent": null,
        "intent": "CogniMap Collectors - Data collection modules for architecture analysis.",
        "semantic_tags": [],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.098819Z",
        "hash": "af3e7fb8",
        "language": "python",
        "type": "component"
      }
    },
    {
      "id": "45616225-fdd9-4404-bc6a-f87b048a06d9",
      "filepath": "cognimap/core/analyzer.py",
      "name": "analyzer",
      "type": "component",
      "language": "python",
      "semantic_tags": [
        "authentication",
        "database",
        "api",
        "testing",
        "ui",
        "service",
        "model",
        "utility",
        "configuration",
        "security"
      ],
      "imports": [
        "re\nfrom pathlib import Path\nfrom typing import Dict, List, Any, Optional, Set, Tuple\nimport json\nfrom datetime import datetime\nimport hashlib\n\n\nclass SemanticAnalyzer"
      ],
      "exports": [
        "IntentExtractor",
        "SemanticAnalyzer"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "45616225-fdd9-4404-bc6a-f87b048a06d9",
        "birth": "2025-08-07T07:23:38.098894Z",
        "parent": null,
        "intent": "CogniMap Semantic Analyzer - AI-powered code understanding.",
        "semantic_tags": [
          "authentication",
          "database",
          "api",
          "testing",
          "ui",
          "service",
          "model",
          "utility",
          "configuration",
          "security"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.099109Z",
        "hash": "59ac31db",
        "language": "python",
        "type": "component"
      }
    },
    {
      "id": "8b309d52-c224-4b8f-a4a6-4a88aa934dba",
      "filepath": "cognimap/core/scanner.py",
      "name": "scanner",
      "type": "component",
      "language": "python",
      "semantic_tags": [
        "database",
        "api",
        "testing",
        "utility",
        "configuration"
      ],
      "imports": [
        "ast\nimport re\nfrom pathlib import Path\nfrom typing import Dict, List, Any, Optional, Set\nimport json\n\n\nclass MultiLanguageParser"
      ],
      "exports": [
        "JavaScriptParser",
        "JavaParser",
        "PythonParser",
        "BaseParser",
        "GoParser",
        "CodeScanner",
        "MultiLanguageParser"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "8b309d52-c224-4b8f-a4a6-4a88aa934dba",
        "birth": "2025-08-07T07:23:38.099218Z",
        "parent": null,
        "intent": "CogniMap Code Scanner - Multi-language code analysis engine.",
        "semantic_tags": [
          "database",
          "api",
          "testing",
          "utility",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.099909Z",
        "hash": "a2b64240",
        "language": "python",
        "type": "component"
      }
    },
    {
      "id": "cbcc7d16-0e03-442e-891d-499fafb4a18e",
      "filepath": "cognimap/core/__init__.py",
      "name": "__init__",
      "type": "component",
      "language": "python",
      "semantic_tags": [],
      "imports": [
        "cognimap.core.fingerprint",
        "cognimap.core.analyzer"
      ],
      "exports": [],
      "calls": [],
      "dependencies": [
        "cognimap/core/analyzer.py"
      ],
      "fingerprint": {
        "id": "cbcc7d16-0e03-442e-891d-499fafb4a18e",
        "birth": "2025-08-07T07:23:38.099983Z",
        "parent": null,
        "intent": "CogniMap Core Engine - The heart of architecture understanding.",
        "semantic_tags": [],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.100028Z",
        "hash": "044ebfb9",
        "language": "python",
        "type": "component"
      }
    },
    {
      "id": "602a5ee7-78e2-4d5d-9154-4a2310f562d1",
      "filepath": "cognimap/core/protocol.py",
      "name": "protocol",
      "type": "protocol",
      "language": "python",
      "semantic_tags": [
        "testing",
        "ui",
        "service",
        "model",
        "utility",
        "configuration"
      ],
      "imports": [
        "typing"
      ],
      "exports": [
        "CogniMapEvent",
        "WarningSeverity",
        "ArchitecturalLayer",
        "ProtocolVersion",
        "ComponentType",
        "EventType",
        "CogniMapNode",
        "CogniMapEdge",
        "CogniMapWarning",
        "CogniMapProtocol",
        "RelationshipType"
      ],
      "calls": [],
      "dependencies": [],
      "fingerprint": {
        "id": "602a5ee7-78e2-4d5d-9154-4a2310f562d1",
        "birth": "2025-08-07T07:23:38.100086Z",
        "parent": null,
        "intent": "CogniMap Protocol - Communication and data standards.",
        "semantic_tags": [
          "testing",
          "ui",
          "service",
          "model",
          "utility",
          "configuration"
        ],
        "version": "1.0.0",
        "last_sync": "2025-08-07T07:23:38.100409Z",
        "hash": "6a350c52",
        "language": "python",
        "type": "protocol"
      }
    }
  ],
  "edges": [
    {
      "source": "tests/test_garbage_flag.py",
      "target": "semloop_models/__init__.py",
      "type": "imports",
      "metadata": {
        "module": "semloop_models"
      }
    },
    {
      "source": "tests/test_har_analyzer.py",
      "target": "tools/har_analyzer.py",
      "type": "imports",
      "metadata": {
        "module": "tools.har_analyzer"
      }
    },
    {
      "source": "tests/test_session_summarizer.py",
      "target": "tools/session_summarizer.py",
      "type": "imports",
      "metadata": {
        "module": "tools.session_summarizer"
      }
    },
    {
      "source": "tests/test_meta_analyst.py",
      "target": "tools/meta_analyst.py",
      "type": "imports",
      "metadata": {
        "module": "tools.meta_analyst"
      }
    },
    {
      "source": "tests/test_real_embeddings.py",
      "target": "services/embedder.py",
      "type": "imports",
      "metadata": {
        "module": "services.embedder"
      }
    },
    {
      "source": "tests/test_semantic_diff.py",
      "target": "tools/semantic_diff.py",
      "type": "imports",
      "metadata": {
        "module": "tools.semantic_diff"
      }
    },
    {
      "source": "semloop_models/__init__.py",
      "target": "semloop_models/event_envelope.py",
      "type": "imports",
      "metadata": {
        "module": "semloop_models.event_envelope"
      }
    },
    {
      "source": "cognimap/__init__.py",
      "target": "cognimap/core/analyzer.py",
      "type": "imports",
      "metadata": {
        "module": "cognimap.core.analyzer"
      }
    },
    {
      "source": "evolution/aether/polarity_embedder.py",
      "target": "evolution/aether/enhanced_events.py",
      "type": "imports",
      "metadata": {
        "module": "evolution.aether.enhanced_events"
      }
    },
    {
      "source": "evolution/aether/polarity_embedder.py",
      "target": "semloop_models/__init__.py",
      "type": "imports",
      "metadata": {
        "module": "semloop_models"
      }
    },
    {
      "source": "evolution/aether/enhanced_events.py",
      "target": "semloop_models/event_envelope.py",
      "type": "imports",
      "metadata": {
        "module": "semloop_models.event_envelope"
      }
    },
    {
      "source": "cognimap/core/__init__.py",
      "target": "cognimap/core/analyzer.py",
      "type": "imports",
      "metadata": {
        "module": "cognimap.core.analyzer"
      }
    },
    {
      "source": "tools/meta_analyst.py",
      "target": "tools/credit_sentinel_v2.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "authentication"
      }
    },
    {
      "source": "tools/credit_sentinel_v2.py",
      "target": "tools/github_client.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "authentication"
      }
    },
    {
      "source": "tools/github_client.py",
      "target": "tools/semantic_diff.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "authentication"
      }
    },
    {
      "source": "tools/semantic_diff.py",
      "target": "tests/test_planner_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "authentication"
      }
    },
    {
      "source": "tests/test_planner_agent.py",
      "target": "tests/test_credit_sentinel.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "authentication"
      }
    },
    {
      "source": "tests/test_credit_sentinel.py",
      "target": "tests/test_meta_analyst.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "authentication"
      }
    },
    {
      "source": "tests/test_meta_analyst.py",
      "target": "tests/test_github_client.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "authentication"
      }
    },
    {
      "source": "tests/test_github_client.py",
      "target": "scripts/semloop_health.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "authentication"
      }
    },
    {
      "source": "scripts/semloop_health.py",
      "target": "cognimap/cli.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "authentication"
      }
    },
    {
      "source": "cognimap/cli.py",
      "target": "cognimap/setup.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "authentication"
      }
    },
    {
      "source": "cognimap/setup.py",
      "target": "tools/ecosystem/library/composite/research/topic_research_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "authentication"
      }
    },
    {
      "source": "tools/ecosystem/library/composite/research/topic_research_orchestrator.py",
      "target": "src/agents/tool_hunter_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "authentication"
      }
    },
    {
      "source": "src/agents/tool_hunter_agent.py",
      "target": "src/agents/planner_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "authentication"
      }
    },
    {
      "source": "src/agents/planner_agent.py",
      "target": "evolution/treasury/crypto_wallet.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "authentication"
      }
    },
    {
      "source": "evolution/treasury/crypto_wallet.py",
      "target": "evolution/aether/intent_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "authentication"
      }
    },
    {
      "source": "evolution/aether/intent_orchestrator.py",
      "target": "evolution/agents/architect_agent/architect.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "authentication"
      }
    },
    {
      "source": "evolution/agents/architect_agent/architect.py",
      "target": "cognimap/core/analyzer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "authentication"
      }
    },
    {
      "source": "tools/meta_analyst.py",
      "target": "tools/semantic_diff.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "tools/semantic_diff.py",
      "target": "tests/test_tool_hunter_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "tests/test_tool_hunter_agent.py",
      "target": "tests/test_har_analyzer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "tests/test_har_analyzer.py",
      "target": "tests/test_aether_sprint_0.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "tests/test_aether_sprint_0.py",
      "target": "tests/test_semloop_bootstrap.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "tests/test_semloop_bootstrap.py",
      "target": "tests/test_aether_sprint_2.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "tests/test_aether_sprint_2.py",
      "target": "tests/test_meta_analyst.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "tests/test_meta_analyst.py",
      "target": "tests/test_github_client.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "tests/test_github_client.py",
      "target": "tests/test_semantic_diff.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "tests/test_semantic_diff.py",
      "target": "scripts/semloop_health.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "scripts/semloop_health.py",
      "target": "services/embedder.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "services/embedder.py",
      "target": "cognimap/cli.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "cognimap/cli.py",
      "target": "cognimap/setup.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "cognimap/setup.py",
      "target": "tools/ecosystem/library/evolution/sql_query.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/sql_query.py",
      "target": "tools/ecosystem/library/evolution/sqlite.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/sqlite.py",
      "target": "tools/ecosystem/library/foundation/code_executor.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "tools/ecosystem/library/foundation/code_executor.py",
      "target": "tools/ecosystem/library/intelligence/brave-search.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "tools/ecosystem/library/intelligence/brave-search.py",
      "target": "tools/ecosystem/library/intelligence/vector_search.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "tools/ecosystem/library/intelligence/vector_search.py",
      "target": "tools/ecosystem/library/intelligence/web_search.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "tools/ecosystem/library/intelligence/web_search.py",
      "target": "tools/ecosystem/library/composite/research/topic_research_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "tools/ecosystem/library/composite/research/topic_research_orchestrator.py",
      "target": "tests/tools/test_sql_query.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "tests/tools/test_sql_query.py",
      "target": "tests/tools/test_sqlite.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "tests/tools/test_sqlite.py",
      "target": "tests/integration/test_all_components.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "tests/integration/test_all_components.py",
      "target": "src/agents/codegen_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "src/agents/codegen_agent.py",
      "target": "src/agents/tool_hunter_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "src/agents/tool_hunter_agent.py",
      "target": "evolution/treasury/init_wallet.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "evolution/treasury/init_wallet.py",
      "target": "evolution/treasury/crypto_wallet.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "evolution/treasury/crypto_wallet.py",
      "target": "evolution/aether/polarity_migration.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "evolution/aether/polarity_migration.py",
      "target": "evolution/aether/resonance_analyzer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "evolution/aether/resonance_analyzer.py",
      "target": "evolution/aether/polarity_embedder.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "evolution/aether/polarity_embedder.py",
      "target": "evolution/aether/intent_substrate.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "evolution/aether/intent_substrate.py",
      "target": "evolution/aether/intent_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "evolution/aether/intent_orchestrator.py",
      "target": "evolution/aether/karma_agent_runtime.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "evolution/aether/karma_agent_runtime.py",
      "target": "evolution/aether/unified_field.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "evolution/aether/unified_field.py",
      "target": "evolution/aether/karmic_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "evolution/aether/karmic_orchestrator.py",
      "target": "evolution/aether/polarity_calculator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "evolution/aether/polarity_calculator.py",
      "target": "evolution/agents/architect_agent/architect.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "evolution/agents/architect_agent/architect.py",
      "target": "evolution/agents/discussion_agent/reviewer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "evolution/agents/discussion_agent/reviewer.py",
      "target": "evolution/agents/implementor_agent/implementor.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "evolution/agents/implementor_agent/implementor.py",
      "target": "cognimap/core/analyzer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "cognimap/core/analyzer.py",
      "target": "cognimap/core/scanner.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "database"
      }
    },
    {
      "source": "tools/meta_analyst.py",
      "target": "tools/credit_sentinel_v2.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tools/credit_sentinel_v2.py",
      "target": "tools/session_summarizer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tools/session_summarizer.py",
      "target": "tools/github_client.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tools/github_client.py",
      "target": "tools/har_analyzer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tools/har_analyzer.py",
      "target": "tests/test_planner_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tests/test_planner_agent.py",
      "target": "tests/test_pilot_001_e2e.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tests/test_pilot_001_e2e.py",
      "target": "tests/test_har_analyzer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tests/test_har_analyzer.py",
      "target": "tests/test_credit_sentinel.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tests/test_credit_sentinel.py",
      "target": "tests/test_aether_sprint_0.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tests/test_aether_sprint_0.py",
      "target": "tests/test_semloop_bootstrap.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tests/test_semloop_bootstrap.py",
      "target": "tests/test_aether_sprint_2.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tests/test_aether_sprint_2.py",
      "target": "tests/test_codegen_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tests/test_codegen_agent.py",
      "target": "tests/test_github_client.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tests/test_github_client.py",
      "target": "tests/test_real_embeddings.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tests/test_real_embeddings.py",
      "target": "scripts/semloop_health.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "scripts/semloop_health.py",
      "target": "services/embedder.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "services/embedder.py",
      "target": "cognimap/cli.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "cognimap/cli.py",
      "target": "cognimap/setup.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "cognimap/setup.py",
      "target": "tools/ecosystem/taxonomy.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tools/ecosystem/taxonomy.py",
      "target": "tools/ecosystem/library/evolution/sql_query.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/sql_query.py",
      "target": "tools/ecosystem/library/evolution/document_loader.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/document_loader.py",
      "target": "tools/ecosystem/library/evolution/github.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/github.py",
      "target": "tools/ecosystem/library/evolution/function_wrapper.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/function_wrapper.py",
      "target": "tools/ecosystem/library/evolution/data_connector.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/data_connector.py",
      "target": "tools/ecosystem/library/evolution/sqlite.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/sqlite.py",
      "target": "tools/ecosystem/library/evolution/rag_pipeline.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/rag_pipeline.py",
      "target": "tools/ecosystem/library/evolution/slack.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/slack.py",
      "target": "tools/ecosystem/library/foundation/code_executor.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tools/ecosystem/library/foundation/code_executor.py",
      "target": "tools/ecosystem/library/foundation/filesystem.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tools/ecosystem/library/foundation/filesystem.py",
      "target": "tools/ecosystem/library/intelligence/agent_chat.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tools/ecosystem/library/intelligence/agent_chat.py",
      "target": "tools/ecosystem/library/intelligence/brave-search.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tools/ecosystem/library/intelligence/brave-search.py",
      "target": "tools/ecosystem/library/intelligence/vector_search.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tools/ecosystem/library/intelligence/vector_search.py",
      "target": "tools/ecosystem/library/intelligence/web_search.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tools/ecosystem/library/intelligence/web_search.py",
      "target": "tools/ecosystem/library/composite/research/topic_research_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tools/ecosystem/library/composite/research/topic_research_orchestrator.py",
      "target": "tests/integration/test_all_components.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tests/integration/test_all_components.py",
      "target": "src/agents/codegen_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "src/agents/codegen_agent.py",
      "target": "src/agents/tool_hunter_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "src/agents/tool_hunter_agent.py",
      "target": "src/agents/planner_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "src/agents/planner_agent.py",
      "target": "evolution/runtime/agent_runtime.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "evolution/runtime/agent_runtime.py",
      "target": "evolution/orchestrator/evo_orchestrator_wired.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "evolution/orchestrator/evo_orchestrator_wired.py",
      "target": "evolution/treasury/crypto_wallet.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "evolution/treasury/crypto_wallet.py",
      "target": "evolution/aether/enhanced_events.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "evolution/aether/enhanced_events.py",
      "target": "evolution/aether/karma_agent_runtime.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "evolution/aether/karma_agent_runtime.py",
      "target": "evolution/aether/karmic_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "evolution/aether/karmic_orchestrator.py",
      "target": "evolution/aether/polarity_calculator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "evolution/aether/polarity_calculator.py",
      "target": "evolution/agents/architect_agent/architect.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "evolution/agents/architect_agent/architect.py",
      "target": "evolution/agents/external_auditor/auditor.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "evolution/agents/external_auditor/auditor.py",
      "target": "evolution/agents/treasurer_agent/treasurer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "evolution/agents/treasurer_agent/treasurer.py",
      "target": "evolution/agents/discussion_agent/reviewer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "evolution/agents/discussion_agent/reviewer.py",
      "target": "evolution/agents/implementor_agent/implementor.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "evolution/agents/implementor_agent/implementor.py",
      "target": "cognimap/core/analyzer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "cognimap/core/analyzer.py",
      "target": "cognimap/core/scanner.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "api"
      }
    },
    {
      "source": "tools/meta_analyst.py",
      "target": "tools/credit_sentinel_v2.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tools/credit_sentinel_v2.py",
      "target": "tools/session_summarizer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tools/session_summarizer.py",
      "target": "tools/lock_watcher.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tools/lock_watcher.py",
      "target": "tools/github_client.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tools/github_client.py",
      "target": "tools/context_validator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tools/context_validator.py",
      "target": "tools/semantic_diff.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tools/semantic_diff.py",
      "target": "tests/test_planner_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/test_planner_agent.py",
      "target": "tests/test_garbage_flag.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/test_garbage_flag.py",
      "target": "tests/test_pilot_001_e2e.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/test_pilot_001_e2e.py",
      "target": "tests/test_tool_hunter_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/test_tool_hunter_agent.py",
      "target": "tests/test_har_analyzer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/test_har_analyzer.py",
      "target": "tests/test_credit_sentinel.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/test_credit_sentinel.py",
      "target": "tests/test_aether_sprint_1.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/test_aether_sprint_1.py",
      "target": "tests/test_aether_sprint_0.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/test_aether_sprint_0.py",
      "target": "tests/test_semloop_bootstrap.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/test_semloop_bootstrap.py",
      "target": "tests/test_session_summarizer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/test_session_summarizer.py",
      "target": "tests/test_aether_sprint_2.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/test_aether_sprint_2.py",
      "target": "tests/__init__.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/__init__.py",
      "target": "tests/test_meta_analyst.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/test_meta_analyst.py",
      "target": "tests/test_codegen_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/test_codegen_agent.py",
      "target": "tests/test_github_client.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/test_github_client.py",
      "target": "tests/test_real_embeddings.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/test_real_embeddings.py",
      "target": "tests/test_semantic_diff.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/test_semantic_diff.py",
      "target": "semloop_models/event_envelope.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "semloop_models/event_envelope.py",
      "target": "services/embedder.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "services/embedder.py",
      "target": "evolution/test_integration.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "evolution/test_integration.py",
      "target": "cognimap/setup.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "cognimap/setup.py",
      "target": "tools/ecosystem/taxonomy.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tools/ecosystem/taxonomy.py",
      "target": "tools/ecosystem/library/composite/research/topic_research_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tools/ecosystem/library/composite/research/topic_research_orchestrator.py",
      "target": "tests/tools/test_agent_chat.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/tools/test_agent_chat.py",
      "target": "tests/tools/test_sql_query.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/tools/test_sql_query.py",
      "target": "tests/tools/test_vector_search.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/tools/test_vector_search.py",
      "target": "tests/tools/test_brave-search.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/tools/test_brave-search.py",
      "target": "tests/tools/test_code_executor.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/tools/test_code_executor.py",
      "target": "tests/tools/test_github.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/tools/test_github.py",
      "target": "tests/tools/test_slack.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/tools/test_slack.py",
      "target": "tests/tools/test_document_loader.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/tools/test_document_loader.py",
      "target": "tests/tools/test_web_search.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/tools/test_web_search.py",
      "target": "tests/tools/test_integration_test.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/tools/test_integration_test.py",
      "target": "tests/tools/test_sqlite.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/tools/test_sqlite.py",
      "target": "tests/tools/test_data_connector.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/tools/test_data_connector.py",
      "target": "tests/tools/test_rag_pipeline.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/tools/test_rag_pipeline.py",
      "target": "tests/tools/test_function_wrapper.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/tools/test_function_wrapper.py",
      "target": "tests/tools/test_filesystem.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/tools/test_filesystem.py",
      "target": "tests/integration/test_all_components.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tests/integration/test_all_components.py",
      "target": "src/agents/codegen_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "src/agents/codegen_agent.py",
      "target": "src/agents/tool_hunter_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "src/agents/tool_hunter_agent.py",
      "target": "src/agents/planner_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "src/agents/planner_agent.py",
      "target": "evolution/runtime/agent_runtime.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "evolution/runtime/agent_runtime.py",
      "target": "evolution/orchestrator/evo_orchestrator_wired.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "evolution/orchestrator/evo_orchestrator_wired.py",
      "target": "evolution/tests/test_aether_sprint_3.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "evolution/tests/test_aether_sprint_3.py",
      "target": "evolution/treasury/crypto_wallet.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "evolution/treasury/crypto_wallet.py",
      "target": "evolution/aether/polarity_migration.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "evolution/aether/polarity_migration.py",
      "target": "evolution/aether/resonance_analyzer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "evolution/aether/resonance_analyzer.py",
      "target": "evolution/aether/polarity_embedder.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "evolution/aether/polarity_embedder.py",
      "target": "evolution/aether/enhanced_events.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "evolution/aether/enhanced_events.py",
      "target": "evolution/aether/intent_substrate.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "evolution/aether/intent_substrate.py",
      "target": "evolution/aether/intent_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "evolution/aether/intent_orchestrator.py",
      "target": "evolution/aether/karma_agent_runtime.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "evolution/aether/karma_agent_runtime.py",
      "target": "evolution/aether/unified_field.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "evolution/aether/unified_field.py",
      "target": "evolution/aether/karmic_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "evolution/aether/karmic_orchestrator.py",
      "target": "evolution/aether/polarity_calculator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "evolution/aether/polarity_calculator.py",
      "target": "evolution/common/kafka_utils.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "evolution/common/kafka_utils.py",
      "target": "evolution/agents/architect_agent/architect.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "evolution/agents/architect_agent/architect.py",
      "target": "evolution/agents/external_auditor/auditor.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "evolution/agents/external_auditor/auditor.py",
      "target": "evolution/agents/implementor_agent/implementor.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "evolution/agents/implementor_agent/implementor.py",
      "target": "cognimap/core/analyzer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "cognimap/core/analyzer.py",
      "target": "cognimap/core/scanner.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "cognimap/core/scanner.py",
      "target": "cognimap/core/protocol.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "testing"
      }
    },
    {
      "source": "tools/meta_analyst.py",
      "target": "tools/github_client.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "tools/github_client.py",
      "target": "tools/har_analyzer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "tools/har_analyzer.py",
      "target": "tests/test_planner_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "tests/test_planner_agent.py",
      "target": "tests/test_pilot_001_e2e.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "tests/test_pilot_001_e2e.py",
      "target": "tests/test_har_analyzer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "tests/test_har_analyzer.py",
      "target": "tests/test_aether_sprint_1.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "tests/test_aether_sprint_1.py",
      "target": "tests/test_aether_sprint_0.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "tests/test_aether_sprint_0.py",
      "target": "tools/ecosystem/library/composite/research/topic_research_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "tools/ecosystem/library/composite/research/topic_research_orchestrator.py",
      "target": "tests/integration/test_all_components.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "tests/integration/test_all_components.py",
      "target": "src/agents/tool_hunter_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "src/agents/tool_hunter_agent.py",
      "target": "src/agents/planner_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "src/agents/planner_agent.py",
      "target": "evolution/runtime/agent_runtime.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "evolution/runtime/agent_runtime.py",
      "target": "evolution/orchestrator/evo_orchestrator_wired.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "evolution/orchestrator/evo_orchestrator_wired.py",
      "target": "evolution/orchestrator/evo_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "evolution/orchestrator/evo_orchestrator.py",
      "target": "evolution/tests/test_aether_sprint_3.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "evolution/tests/test_aether_sprint_3.py",
      "target": "evolution/aether/polarity_migration.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "evolution/aether/polarity_migration.py",
      "target": "evolution/aether/resonance_analyzer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "evolution/aether/resonance_analyzer.py",
      "target": "evolution/aether/polarity_embedder.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "evolution/aether/polarity_embedder.py",
      "target": "evolution/aether/enhanced_events.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "evolution/aether/enhanced_events.py",
      "target": "evolution/aether/intent_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "evolution/aether/intent_orchestrator.py",
      "target": "evolution/aether/karma_agent_runtime.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "evolution/aether/karma_agent_runtime.py",
      "target": "evolution/aether/unified_field.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "evolution/aether/unified_field.py",
      "target": "evolution/aether/karmic_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "evolution/aether/karmic_orchestrator.py",
      "target": "evolution/agents/architect_agent/architect.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "evolution/agents/architect_agent/architect.py",
      "target": "evolution/agents/discussion_agent/reviewer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "evolution/agents/discussion_agent/reviewer.py",
      "target": "cognimap/core/analyzer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "cognimap/core/analyzer.py",
      "target": "cognimap/core/protocol.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "ui"
      }
    },
    {
      "source": "tools/meta_analyst.py",
      "target": "tools/credit_sentinel_v2.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tools/credit_sentinel_v2.py",
      "target": "tools/session_summarizer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tools/session_summarizer.py",
      "target": "tools/context_validator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tools/context_validator.py",
      "target": "tests/test_garbage_flag.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tests/test_garbage_flag.py",
      "target": "tests/test_pilot_001_e2e.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tests/test_pilot_001_e2e.py",
      "target": "tests/test_tool_hunter_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tests/test_tool_hunter_agent.py",
      "target": "tests/test_session_summarizer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tests/test_session_summarizer.py",
      "target": "tests/test_aether_sprint_2.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tests/test_aether_sprint_2.py",
      "target": "tests/test_codegen_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tests/test_codegen_agent.py",
      "target": "tests/test_real_embeddings.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tests/test_real_embeddings.py",
      "target": "semloop_models/event_envelope.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "semloop_models/event_envelope.py",
      "target": "semloop_models/__init__.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "semloop_models/__init__.py",
      "target": "services/embedder.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "services/embedder.py",
      "target": "tools/ecosystem/taxonomy.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tools/ecosystem/taxonomy.py",
      "target": "tools/ecosystem/library/evolution/sql_query.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/sql_query.py",
      "target": "tools/ecosystem/library/evolution/document_loader.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/document_loader.py",
      "target": "tools/ecosystem/library/evolution/github.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/github.py",
      "target": "tools/ecosystem/library/evolution/function_wrapper.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/function_wrapper.py",
      "target": "tools/ecosystem/library/evolution/data_connector.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/data_connector.py",
      "target": "tools/ecosystem/library/evolution/sqlite.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/sqlite.py",
      "target": "tools/ecosystem/library/evolution/rag_pipeline.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/rag_pipeline.py",
      "target": "tools/ecosystem/library/evolution/slack.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/slack.py",
      "target": "tools/ecosystem/library/foundation/code_executor.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tools/ecosystem/library/foundation/code_executor.py",
      "target": "tools/ecosystem/library/foundation/filesystem.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tools/ecosystem/library/foundation/filesystem.py",
      "target": "tools/ecosystem/library/intelligence/agent_chat.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tools/ecosystem/library/intelligence/agent_chat.py",
      "target": "tools/ecosystem/library/intelligence/brave-search.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tools/ecosystem/library/intelligence/brave-search.py",
      "target": "tools/ecosystem/library/intelligence/vector_search.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tools/ecosystem/library/intelligence/vector_search.py",
      "target": "tools/ecosystem/library/intelligence/web_search.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tools/ecosystem/library/intelligence/web_search.py",
      "target": "tools/ecosystem/library/composite/research/topic_research_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tools/ecosystem/library/composite/research/topic_research_orchestrator.py",
      "target": "tests/integration/test_all_components.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tests/integration/test_all_components.py",
      "target": "src/agents/codegen_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "src/agents/codegen_agent.py",
      "target": "src/agents/tool_hunter_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "src/agents/tool_hunter_agent.py",
      "target": "src/agents/planner_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "src/agents/planner_agent.py",
      "target": "evolution/orchestrator/evo_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "evolution/orchestrator/evo_orchestrator.py",
      "target": "evolution/aether/polarity_migration.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "evolution/aether/polarity_migration.py",
      "target": "evolution/aether/resonance_analyzer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "evolution/aether/resonance_analyzer.py",
      "target": "evolution/aether/polarity_embedder.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "evolution/aether/polarity_embedder.py",
      "target": "evolution/aether/enhanced_events.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "evolution/aether/enhanced_events.py",
      "target": "evolution/aether/intent_substrate.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "evolution/aether/intent_substrate.py",
      "target": "evolution/aether/unified_field.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "evolution/aether/unified_field.py",
      "target": "evolution/aether/karmic_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "evolution/aether/karmic_orchestrator.py",
      "target": "evolution/agents/external_auditor/auditor.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "evolution/agents/external_auditor/auditor.py",
      "target": "evolution/agents/discussion_agent/reviewer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "evolution/agents/discussion_agent/reviewer.py",
      "target": "evolution/agents/implementor_agent/implementor.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "evolution/agents/implementor_agent/implementor.py",
      "target": "cognimap/core/analyzer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "cognimap/core/analyzer.py",
      "target": "cognimap/core/protocol.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "model"
      }
    },
    {
      "source": "tools/meta_analyst.py",
      "target": "tests/test_tool_hunter_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "utility"
      }
    },
    {
      "source": "tests/test_tool_hunter_agent.py",
      "target": "tests/test_meta_analyst.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "utility"
      }
    },
    {
      "source": "tests/test_meta_analyst.py",
      "target": "evolution/test_integration.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "utility"
      }
    },
    {
      "source": "evolution/test_integration.py",
      "target": "cognimap/cli.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "utility"
      }
    },
    {
      "source": "cognimap/cli.py",
      "target": "tools/ecosystem/library/composite/research/topic_research_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "utility"
      }
    },
    {
      "source": "tools/ecosystem/library/composite/research/topic_research_orchestrator.py",
      "target": "evolution/runtime/agent_runtime.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "utility"
      }
    },
    {
      "source": "evolution/runtime/agent_runtime.py",
      "target": "evolution/orchestrator/evo_orchestrator_wired.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "utility"
      }
    },
    {
      "source": "evolution/orchestrator/evo_orchestrator_wired.py",
      "target": "evolution/aether/unified_field.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "utility"
      }
    },
    {
      "source": "evolution/aether/unified_field.py",
      "target": "evolution/aether/polarity_calculator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "utility"
      }
    },
    {
      "source": "evolution/aether/polarity_calculator.py",
      "target": "evolution/common/kafka_utils.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "utility"
      }
    },
    {
      "source": "evolution/common/kafka_utils.py",
      "target": "evolution/agents/external_auditor/auditor.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "utility"
      }
    },
    {
      "source": "evolution/agents/external_auditor/auditor.py",
      "target": "cognimap/core/analyzer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "utility"
      }
    },
    {
      "source": "cognimap/core/analyzer.py",
      "target": "cognimap/core/scanner.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "utility"
      }
    },
    {
      "source": "cognimap/core/scanner.py",
      "target": "cognimap/core/protocol.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "utility"
      }
    },
    {
      "source": "tools/credit_sentinel_v2.py",
      "target": "tools/lock_watcher.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tools/lock_watcher.py",
      "target": "tools/github_client.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tools/github_client.py",
      "target": "tests/test_planner_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tests/test_planner_agent.py",
      "target": "tests/test_garbage_flag.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tests/test_garbage_flag.py",
      "target": "tests/test_pilot_001_e2e.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tests/test_pilot_001_e2e.py",
      "target": "tests/test_tool_hunter_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tests/test_tool_hunter_agent.py",
      "target": "tests/test_credit_sentinel.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tests/test_credit_sentinel.py",
      "target": "tests/test_aether_sprint_1.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tests/test_aether_sprint_1.py",
      "target": "tests/test_aether_sprint_0.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tests/test_aether_sprint_0.py",
      "target": "tests/test_semloop_bootstrap.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tests/test_semloop_bootstrap.py",
      "target": "tests/test_aether_sprint_2.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tests/test_aether_sprint_2.py",
      "target": "tests/test_codegen_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tests/test_codegen_agent.py",
      "target": "tests/test_real_embeddings.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tests/test_real_embeddings.py",
      "target": "tests/test_semantic_diff.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tests/test_semantic_diff.py",
      "target": "scripts/semloop_health.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "scripts/semloop_health.py",
      "target": "semloop_models/event_envelope.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "semloop_models/event_envelope.py",
      "target": "semloop_models/__init__.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "semloop_models/__init__.py",
      "target": "services/embedder.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "services/embedder.py",
      "target": "evolution/test_integration.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "evolution/test_integration.py",
      "target": "cognimap/cli.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "cognimap/cli.py",
      "target": "cognimap/setup.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "cognimap/setup.py",
      "target": "tools/ecosystem/taxonomy.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tools/ecosystem/taxonomy.py",
      "target": "tools/ecosystem/library/evolution/sql_query.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/sql_query.py",
      "target": "tools/ecosystem/library/evolution/document_loader.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/document_loader.py",
      "target": "tools/ecosystem/library/evolution/github.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/github.py",
      "target": "tools/ecosystem/library/evolution/function_wrapper.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/function_wrapper.py",
      "target": "tools/ecosystem/library/evolution/data_connector.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/data_connector.py",
      "target": "tools/ecosystem/library/evolution/sqlite.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/sqlite.py",
      "target": "tools/ecosystem/library/evolution/rag_pipeline.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/rag_pipeline.py",
      "target": "tools/ecosystem/library/evolution/slack.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tools/ecosystem/library/evolution/slack.py",
      "target": "tools/ecosystem/library/foundation/code_executor.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tools/ecosystem/library/foundation/code_executor.py",
      "target": "tools/ecosystem/library/foundation/filesystem.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tools/ecosystem/library/foundation/filesystem.py",
      "target": "tools/ecosystem/library/intelligence/agent_chat.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tools/ecosystem/library/intelligence/agent_chat.py",
      "target": "tools/ecosystem/library/intelligence/brave-search.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tools/ecosystem/library/intelligence/brave-search.py",
      "target": "tools/ecosystem/library/intelligence/vector_search.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tools/ecosystem/library/intelligence/vector_search.py",
      "target": "tools/ecosystem/library/intelligence/web_search.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tools/ecosystem/library/intelligence/web_search.py",
      "target": "tools/ecosystem/library/composite/research/topic_research_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tools/ecosystem/library/composite/research/topic_research_orchestrator.py",
      "target": "tests/integration/test_all_components.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tests/integration/test_all_components.py",
      "target": "src/agents/codegen_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "src/agents/codegen_agent.py",
      "target": "src/agents/tool_hunter_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "src/agents/tool_hunter_agent.py",
      "target": "src/agents/planner_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "src/agents/planner_agent.py",
      "target": "evolution/runtime/agent_runtime.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "evolution/runtime/agent_runtime.py",
      "target": "evolution/orchestrator/evo_orchestrator_wired.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "evolution/orchestrator/evo_orchestrator_wired.py",
      "target": "evolution/orchestrator/evo_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "evolution/orchestrator/evo_orchestrator.py",
      "target": "evolution/tests/test_aether_sprint_3.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "evolution/tests/test_aether_sprint_3.py",
      "target": "evolution/treasury/init_wallet.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "evolution/treasury/init_wallet.py",
      "target": "evolution/treasury/crypto_wallet.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "evolution/treasury/crypto_wallet.py",
      "target": "evolution/aether/polarity_migration.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "evolution/aether/polarity_migration.py",
      "target": "evolution/aether/resonance_analyzer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "evolution/aether/resonance_analyzer.py",
      "target": "evolution/aether/polarity_embedder.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "evolution/aether/polarity_embedder.py",
      "target": "evolution/aether/enhanced_events.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "evolution/aether/enhanced_events.py",
      "target": "evolution/aether/intent_substrate.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "evolution/aether/intent_substrate.py",
      "target": "evolution/aether/intent_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "evolution/aether/intent_orchestrator.py",
      "target": "evolution/aether/karma_agent_runtime.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "evolution/aether/karma_agent_runtime.py",
      "target": "evolution/aether/unified_field.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "evolution/aether/unified_field.py",
      "target": "evolution/aether/karmic_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "evolution/aether/karmic_orchestrator.py",
      "target": "evolution/aether/polarity_calculator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "evolution/aether/polarity_calculator.py",
      "target": "evolution/common/kafka_utils.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "evolution/common/kafka_utils.py",
      "target": "evolution/agents/architect_agent/architect.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "evolution/agents/architect_agent/architect.py",
      "target": "evolution/agents/external_auditor/auditor.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "evolution/agents/external_auditor/auditor.py",
      "target": "evolution/agents/treasurer_agent/treasurer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "evolution/agents/treasurer_agent/treasurer.py",
      "target": "evolution/agents/discussion_agent/reviewer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "evolution/agents/discussion_agent/reviewer.py",
      "target": "evolution/agents/implementor_agent/implementor.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "evolution/agents/implementor_agent/implementor.py",
      "target": "cognimap/core/analyzer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "cognimap/core/analyzer.py",
      "target": "cognimap/core/scanner.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "cognimap/core/scanner.py",
      "target": "cognimap/core/protocol.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "configuration"
      }
    },
    {
      "source": "tools/session_summarizer.py",
      "target": "tools/context_validator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "security"
      }
    },
    {
      "source": "tools/context_validator.py",
      "target": "tools/semantic_diff.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "security"
      }
    },
    {
      "source": "tools/semantic_diff.py",
      "target": "tests/test_planner_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "security"
      }
    },
    {
      "source": "tests/test_planner_agent.py",
      "target": "tests/test_tool_hunter_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "security"
      }
    },
    {
      "source": "tests/test_tool_hunter_agent.py",
      "target": "tests/test_session_summarizer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "security"
      }
    },
    {
      "source": "tests/test_session_summarizer.py",
      "target": "tests/test_real_embeddings.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "security"
      }
    },
    {
      "source": "tests/test_real_embeddings.py",
      "target": "semloop_models/event_envelope.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "security"
      }
    },
    {
      "source": "semloop_models/event_envelope.py",
      "target": "services/embedder.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "security"
      }
    },
    {
      "source": "services/embedder.py",
      "target": "tools/ecosystem/library/composite/research/topic_research_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "security"
      }
    },
    {
      "source": "tools/ecosystem/library/composite/research/topic_research_orchestrator.py",
      "target": "src/agents/tool_hunter_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "security"
      }
    },
    {
      "source": "src/agents/tool_hunter_agent.py",
      "target": "src/agents/planner_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "security"
      }
    },
    {
      "source": "src/agents/planner_agent.py",
      "target": "evolution/treasury/crypto_wallet.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "security"
      }
    },
    {
      "source": "evolution/treasury/crypto_wallet.py",
      "target": "evolution/aether/resonance_analyzer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "security"
      }
    },
    {
      "source": "evolution/aether/resonance_analyzer.py",
      "target": "evolution/aether/enhanced_events.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "security"
      }
    },
    {
      "source": "evolution/aether/enhanced_events.py",
      "target": "evolution/aether/intent_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "security"
      }
    },
    {
      "source": "evolution/aether/intent_orchestrator.py",
      "target": "evolution/aether/karma_agent_runtime.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "security"
      }
    },
    {
      "source": "evolution/aether/karma_agent_runtime.py",
      "target": "evolution/aether/karmic_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "security"
      }
    },
    {
      "source": "evolution/aether/karmic_orchestrator.py",
      "target": "evolution/agents/architect_agent/architect.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "security"
      }
    },
    {
      "source": "evolution/agents/architect_agent/architect.py",
      "target": "evolution/agents/external_auditor/auditor.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "security"
      }
    },
    {
      "source": "evolution/agents/external_auditor/auditor.py",
      "target": "evolution/agents/discussion_agent/reviewer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "security"
      }
    },
    {
      "source": "evolution/agents/discussion_agent/reviewer.py",
      "target": "cognimap/core/analyzer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "security"
      }
    },
    {
      "source": "tests/test_planner_agent.py",
      "target": "tests/test_garbage_flag.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "service"
      }
    },
    {
      "source": "tests/test_garbage_flag.py",
      "target": "tests/test_pilot_001_e2e.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "service"
      }
    },
    {
      "source": "tests/test_pilot_001_e2e.py",
      "target": "tests/test_aether_sprint_1.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "service"
      }
    },
    {
      "source": "tests/test_aether_sprint_1.py",
      "target": "tests/test_semloop_bootstrap.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "service"
      }
    },
    {
      "source": "tests/test_semloop_bootstrap.py",
      "target": "tests/test_codegen_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "service"
      }
    },
    {
      "source": "tests/test_codegen_agent.py",
      "target": "tests/test_real_embeddings.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "service"
      }
    },
    {
      "source": "tests/test_real_embeddings.py",
      "target": "scripts/semloop_health.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "service"
      }
    },
    {
      "source": "scripts/semloop_health.py",
      "target": "services/embedder.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "service"
      }
    },
    {
      "source": "services/embedder.py",
      "target": "cognimap/cli.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "service"
      }
    },
    {
      "source": "cognimap/cli.py",
      "target": "tests/integration/test_all_components.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "service"
      }
    },
    {
      "source": "tests/integration/test_all_components.py",
      "target": "src/agents/codegen_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "service"
      }
    },
    {
      "source": "src/agents/codegen_agent.py",
      "target": "src/agents/planner_agent.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "service"
      }
    },
    {
      "source": "src/agents/planner_agent.py",
      "target": "evolution/runtime/agent_runtime.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "service"
      }
    },
    {
      "source": "evolution/runtime/agent_runtime.py",
      "target": "evolution/treasury/crypto_wallet.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "service"
      }
    },
    {
      "source": "evolution/treasury/crypto_wallet.py",
      "target": "evolution/aether/polarity_embedder.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "service"
      }
    },
    {
      "source": "evolution/aether/polarity_embedder.py",
      "target": "evolution/aether/intent_orchestrator.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "service"
      }
    },
    {
      "source": "evolution/aether/intent_orchestrator.py",
      "target": "evolution/common/kafka_utils.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "service"
      }
    },
    {
      "source": "evolution/common/kafka_utils.py",
      "target": "evolution/agents/external_auditor/auditor.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "service"
      }
    },
    {
      "source": "evolution/agents/external_auditor/auditor.py",
      "target": "evolution/agents/treasurer_agent/treasurer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "service"
      }
    },
    {
      "source": "evolution/agents/treasurer_agent/treasurer.py",
      "target": "evolution/agents/discussion_agent/reviewer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "service"
      }
    },
    {
      "source": "evolution/agents/discussion_agent/reviewer.py",
      "target": "evolution/agents/implementor_agent/implementor.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "service"
      }
    },
    {
      "source": "evolution/agents/implementor_agent/implementor.py",
      "target": "cognimap/core/analyzer.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "service"
      }
    },
    {
      "source": "cognimap/core/analyzer.py",
      "target": "cognimap/core/protocol.py",
      "type": "semantic_related",
      "metadata": {
        "tag": "service"
      }
    }
  ],
  "metadata": {
    "project": "/home/ramz/Documents/adev/COGPLAN",
    "timestamp": "2025-08-08T00:56:03.090254",
    "node_count": 98,
    "edge_count": 388,
    "languages": [
      "python"
    ],
    "component_types": [
      "protocol",
      "service",
      "component",
      "tool",
      "model",
      "test",
      "agent"
    ],
    "semantic_tags": [
      "database",
      "api",
      "service",
      "security",
      "ui",
      "authentication",
      "testing",
      "model",
      "configuration",
      "demo",
      "utility"
    ]
  },
  "statistics": {
    "most_imported": [
      [
        "cognimap/core/analyzer.py",
        12
      ],
      [
        "tools/ecosystem/library/composite/research/topic_research_orchestrator.py",
        9
      ],
      [
        "services/embedder.py",
        8
      ],
      [
        "src/agents/tool_hunter_agent.py",
        8
      ],
      [
        "src/agents/planner_agent.py",
        8
      ]
    ],
    "most_importing": [
      [
        "tools/ecosystem/library/composite/research/topic_research_orchestrator.py",
        9
      ],
      [
        "evolution/aether/polarity_embedder.py",
        8
      ],
      [
        "src/agents/tool_hunter_agent.py",
        8
      ],
      [
        "src/agents/planner_agent.py",
        8
      ],
      [
        "cognimap/core/analyzer.py",
        8
      ]
    ],
    "isolated_nodes": [
      "src/__init__.py",
      "tests/cognimap/test_fingerprint_updater.py",
      "src/agents/__init__.py",
      "cognimap/collectors/__init__.py"
    ],
    "avg_connections": 7.918367346938775,
    "connectivity": 0.9591836734693877
  }
}